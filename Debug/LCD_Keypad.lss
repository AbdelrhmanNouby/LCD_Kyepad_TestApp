
LCD_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000e48  00000edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006c  0080006c  00000ee8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c72  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b05  00000000  00000000  00002da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e3  00000000  00000000  000038ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00005090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070d  00000000  00000000  000054b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d8  00000000  00000000  00005bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007599  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 22 07 	jmp	0xe44	; 0xe44 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "../ECUAL/KEYPAD/KEYPAD_interface.h"
#include "../ECUAL/LCD/LCD.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	UART_u8Init();
  9c:	0e 94 f4 06 	call	0xde8	; 0xde8 <UART_u8Init>
	KEYPAD_u8Init();
  a0:	0e 94 77 00 	call	0xee	; 0xee <KEYPAD_u8Init>
	uint8_t KEYPAD_State = KEYPAD_NO_PRESSED_KEY ;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	89 83       	std	Y+1, r24	; 0x01
	uint8_t flag = LOW ;
  a8:	10 e0       	ldi	r17, 0x00	; 0
    while (1)
    {
		KEYPAD_u8GetPressedKey(&KEYPAD_State);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 c9 00 	call	0x192	; 0x192 <KEYPAD_u8GetPressedKey>
		if ( flag == LOW )
  b2:	11 11       	cpse	r17, r1
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <main+0x36>
		{
			if ( LCD_u8Init() == FINISHED )
  b6:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_u8Init>
  ba:	8f 3f       	cpi	r24, 0xFF	; 255
  bc:	09 f4       	brne	.+2      	; 0xc0 <main+0x2e>
				flag = HIGH ;				
  be:	11 e0       	ldi	r17, 0x01	; 1
			UART_u8SendByte('i');
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	0e 94 1c 07 	call	0xe38	; 0xe38 <UART_u8SendByte>
  c6:	f1 cf       	rjmp	.-30     	; 0xaa <main+0x18>
		}
		else 
		{
			if (( KEYPAD_State > 0) && ( KEYPAD_State < 10 ))
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	89 30       	cpi	r24, 0x09	; 9
  ce:	20 f0       	brcs	.+8      	; 0xd8 <main+0x46>
  d0:	ec cf       	rjmp	.-40     	; 0xaa <main+0x18>
			{
				while ( LCD_u8SendData( KEYPAD_State + '0' ) != FINISHED )
					UART_u8SendByte('d');
  d2:	84 e6       	ldi	r24, 0x64	; 100
  d4:	0e 94 1c 07 	call	0xe38	; 0xe38 <UART_u8SendByte>
		}
		else 
		{
			if (( KEYPAD_State > 0) && ( KEYPAD_State < 10 ))
			{
				while ( LCD_u8SendData( KEYPAD_State + '0' ) != FINISHED )
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	80 5d       	subi	r24, 0xD0	; 208
  dc:	0e 94 39 03 	call	0x672	; 0x672 <LCD_u8SendData>
  e0:	8f 3f       	cpi	r24, 0xFF	; 255
  e2:	b9 f7       	brne	.-18     	; 0xd2 <main+0x40>
  e4:	e2 cf       	rjmp	.-60     	; 0xaa <main+0x18>

000000e6 <ChangeState>:
	return u8ErrorState;
}

void ChangeState (void)
{
	u8Stat = KEYPAD_PRESSED ;
  e6:	8e ef       	ldi	r24, 0xFE	; 254
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	08 95       	ret

000000ee <KEYPAD_u8Init>:
uint8_t KEYPAD_u8Init(void)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	/*step 1 : config Col pins as output*/
	// check if DIO return Error
	if ( DIO_u8SetPinDirection(COL_PORT,COL_PIN0,OUTPUTPIN) != STD_TYPES_OK )
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	65 e0       	ldi	r22, 0x05	; 5
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
  f8:	81 11       	cpse	r24, r1
  fa:	39 c0       	rjmp	.+114    	; 0x16e <KEYPAD_u8Init+0x80>
		u8ErrorState = KEYPAD_Init_Error ;
	else if ( DIO_u8SetPinDirection(COL_PORT,COL_PIN1,OUTPUTPIN) != STD_TYPES_OK )
  fc:	41 e0       	ldi	r20, 0x01	; 1
  fe:	66 e0       	ldi	r22, 0x06	; 6
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 106:	81 11       	cpse	r24, r1
 108:	34 c0       	rjmp	.+104    	; 0x172 <KEYPAD_u8Init+0x84>
		u8ErrorState = KEYPAD_Init_Error ;	
	else if ( DIO_u8SetPinDirection(COL_PORT,COL_PIN2,OUTPUTPIN) != STD_TYPES_OK )
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	67 e0       	ldi	r22, 0x07	; 7
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 114:	81 11       	cpse	r24, r1
 116:	2f c0       	rjmp	.+94     	; 0x176 <KEYPAD_u8Init+0x88>
		u8ErrorState = KEYPAD_Init_Error ;
	/*step 2 : config Rows pins as inputs , pull ups*/
	// check if DIO return Error
	else if ( DIO_u8SetPinDirection(ROW_PORT,ROW_PIN0,INPUTPIN_PULLUP) != STD_TYPES_OK )
 118:	42 e0       	ldi	r20, 0x02	; 2
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 122:	81 11       	cpse	r24, r1
 124:	2a c0       	rjmp	.+84     	; 0x17a <KEYPAD_u8Init+0x8c>
		u8ErrorState = KEYPAD_Init_Error ;
	else if ( DIO_u8SetPinDirection(ROW_PORT,ROW_PIN1,INPUTPIN_PULLUP) != STD_TYPES_OK )
 126:	42 e0       	ldi	r20, 0x02	; 2
 128:	63 e0       	ldi	r22, 0x03	; 3
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 130:	81 11       	cpse	r24, r1
 132:	25 c0       	rjmp	.+74     	; 0x17e <KEYPAD_u8Init+0x90>
		u8ErrorState = KEYPAD_Init_Error ;
	else if ( DIO_u8SetPinDirection(ROW_PORT,ROW_PIN2,INPUTPIN_PULLUP) != STD_TYPES_OK )
 134:	42 e0       	ldi	r20, 0x02	; 2
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 13e:	81 11       	cpse	r24, r1
 140:	20 c0       	rjmp	.+64     	; 0x182 <KEYPAD_u8Init+0x94>
		u8ErrorState = KEYPAD_Init_Error ;
	/*step 3 : Initialize Col pins -> HIGH*/
	// check if DIO return Error
	else if ( DIO_u8SetPinData(COL_PORT,COL_PIN0,HIGH) != STD_TYPES_OK )
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	65 e0       	ldi	r22, 0x05	; 5
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 14c:	81 11       	cpse	r24, r1
 14e:	1b c0       	rjmp	.+54     	; 0x186 <KEYPAD_u8Init+0x98>
		u8ErrorState = KEYPAD_Init_Error ;
	else if ( DIO_u8SetPinData(COL_PORT,COL_PIN1,HIGH) != STD_TYPES_OK )
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	66 e0       	ldi	r22, 0x06	; 6
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 15a:	81 11       	cpse	r24, r1
 15c:	16 c0       	rjmp	.+44     	; 0x18a <KEYPAD_u8Init+0x9c>
		u8ErrorState = KEYPAD_Init_Error ;
	else if ( DIO_u8SetPinData(COL_PORT,COL_PIN2,HIGH) != STD_TYPES_OK )
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	67 e0       	ldi	r22, 0x07	; 7
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 168:	81 11       	cpse	r24, r1
 16a:	11 c0       	rjmp	.+34     	; 0x18e <KEYPAD_u8Init+0xa0>
 16c:	08 95       	ret
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	/*step 1 : config Col pins as output*/
	// check if DIO return Error
	if ( DIO_u8SetPinDirection(COL_PORT,COL_PIN0,OUTPUTPIN) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 16e:	81 e6       	ldi	r24, 0x61	; 97
 170:	08 95       	ret
	else if ( DIO_u8SetPinDirection(COL_PORT,COL_PIN1,OUTPUTPIN) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;	
 172:	81 e6       	ldi	r24, 0x61	; 97
 174:	08 95       	ret
	else if ( DIO_u8SetPinDirection(COL_PORT,COL_PIN2,OUTPUTPIN) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 176:	81 e6       	ldi	r24, 0x61	; 97
 178:	08 95       	ret
	/*step 2 : config Rows pins as inputs , pull ups*/
	// check if DIO return Error
	else if ( DIO_u8SetPinDirection(ROW_PORT,ROW_PIN0,INPUTPIN_PULLUP) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 17a:	81 e6       	ldi	r24, 0x61	; 97
 17c:	08 95       	ret
	else if ( DIO_u8SetPinDirection(ROW_PORT,ROW_PIN1,INPUTPIN_PULLUP) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 17e:	81 e6       	ldi	r24, 0x61	; 97
 180:	08 95       	ret
	else if ( DIO_u8SetPinDirection(ROW_PORT,ROW_PIN2,INPUTPIN_PULLUP) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 182:	81 e6       	ldi	r24, 0x61	; 97
 184:	08 95       	ret
	/*step 3 : Initialize Col pins -> HIGH*/
	// check if DIO return Error
	else if ( DIO_u8SetPinData(COL_PORT,COL_PIN0,HIGH) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 186:	81 e6       	ldi	r24, 0x61	; 97
 188:	08 95       	ret
	else if ( DIO_u8SetPinData(COL_PORT,COL_PIN1,HIGH) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 18a:	81 e6       	ldi	r24, 0x61	; 97
 18c:	08 95       	ret
	else if ( DIO_u8SetPinData(COL_PORT,COL_PIN2,HIGH) != STD_TYPES_OK )
		u8ErrorState = KEYPAD_Init_Error ;
 18e:	81 e6       	ldi	r24, 0x61	; 97
	return u8ErrorState ;
}
 190:	08 95       	ret

00000192 <KEYPAD_u8GetPressedKey>:

// function to check which key is pressed 
uint8_t KEYPAD_u8GetPressedKey(uint8_t* KeyPressed)
{
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	2a 97       	sbiw	r28, 0x0a	; 10
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	7c 01       	movw	r14, r24
	uint8_t u8ErrorState = STD_TYPES_OK;
	uint8_t u8ReturnVal ;
	uint8_t col_indx;
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES ;
 1b4:	99 e0       	ldi	r25, 0x09	; 9
 1b6:	e2 e6       	ldi	r30, 0x62	; 98
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	de 01       	movw	r26, r28
 1bc:	12 96       	adiw	r26, 0x02	; 2
 1be:	01 90       	ld	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	9a 95       	dec	r25
 1c4:	e1 f7       	brne	.-8      	; 0x1be <KEYPAD_u8GetPressedKey+0x2c>

	if ( KeyPressed != NULL )
 1c6:	e1 14       	cp	r14, r1
 1c8:	f1 04       	cpc	r15, r1
 1ca:	09 f4       	brne	.+2      	; 0x1ce <KEYPAD_u8GetPressedKey+0x3c>
 1cc:	ef c0       	rjmp	.+478    	; 0x3ac <KEYPAD_u8GetPressedKey+0x21a>
	{
		switch ( u8Stat )
 1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d2:	8e 3f       	cpi	r24, 0xFE	; 254
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <KEYPAD_u8GetPressedKey+0x46>
 1d6:	d7 c0       	rjmp	.+430    	; 0x386 <KEYPAD_u8GetPressedKey+0x1f4>
 1d8:	d8 f5       	brcc	.+118    	; 0x250 <KEYPAD_u8GetPressedKey+0xbe>
 1da:	8d 3f       	cpi	r24, 0xFD	; 253
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <KEYPAD_u8GetPressedKey+0x4e>
 1de:	88 c0       	rjmp	.+272    	; 0x2f0 <KEYPAD_u8GetPressedKey+0x15e>
 1e0:	e7 c0       	rjmp	.+462    	; 0x3b0 <KEYPAD_u8GetPressedKey+0x21e>
		  case KEYPAD_NO_PRESSED_KEY :
		  {
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
			{
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error 
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	6f 2d       	mov	r22, r15
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 1ec:	81 11       	cpse	r24, r1
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
 1ee:	02 e6       	ldi	r16, 0x62	; 98
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
				{
					if ( DIO_u8GetPinData( ROW_PORT , row_indx , &Pin_State ) != STD_TYPES_OK )	    	// check if DIO return Error 
						u8ErrorState = KEYPAD_GetPressedKey_Error ;
 1f0:	12 e0       	ldi	r17, 0x02	; 2
 1f2:	23 c0       	rjmp	.+70     	; 0x23a <KEYPAD_u8GetPressedKey+0xa8>
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error 
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
				{
					if ( DIO_u8GetPinData( ROW_PORT , row_indx , &Pin_State ) != STD_TYPES_OK )	    	// check if DIO return Error 
 1f4:	ae 01       	movw	r20, r28
 1f6:	4f 5f       	subi	r20, 0xFF	; 255
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	61 2f       	mov	r22, r17
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_u8GetPinData>
 202:	81 11       	cpse	r24, r1
						u8ErrorState = KEYPAD_GetPressedKey_Error ;
 204:	02 e6       	ldi	r16, 0x62	; 98
					if( Pin_State == 0 ) /*if true -> PB is pressed*/
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	81 11       	cpse	r24, r1
 20a:	16 c0       	rjmp	.+44     	; 0x238 <KEYPAD_u8GetPressedKey+0xa6>
					{
						u8ReturnVal =  u8KEYPAD_Arr[row_indx-ROW_S][col_indx-COL_S];												
 20c:	81 2f       	mov	r24, r17
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 97       	sbiw	r24, 0x02	; 2
 212:	2f 2d       	mov	r18, r15
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	25 50       	subi	r18, 0x05	; 5
 218:	31 09       	sbc	r19, r1
 21a:	ac 01       	movw	r20, r24
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	84 0f       	add	r24, r20
 222:	95 1f       	adc	r25, r21
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	4c 0f       	add	r20, r28
 22a:	5d 1f       	adc	r21, r29
 22c:	84 0f       	add	r24, r20
 22e:	95 1f       	adc	r25, r21
 230:	fc 01       	movw	r30, r24
 232:	e2 0f       	add	r30, r18
 234:	f3 1f       	adc	r31, r19
 236:	c1 80       	ldd	r12, Z+1	; 0x01
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
			{
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error 
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
 238:	1f 5f       	subi	r17, 0xFF	; 255
 23a:	15 30       	cpi	r17, 0x05	; 5
 23c:	d8 f2       	brcs	.-74     	; 0x1f4 <KEYPAD_u8GetPressedKey+0x62>
					if( Pin_State == 0 ) /*if true -> PB is pressed*/
					{
						u8ReturnVal =  u8KEYPAD_Arr[row_indx-ROW_S][col_indx-COL_S];												
					}
				}
				if ( DIO_u8SetPinData( COL_PORT,col_indx , HIGH ) != STD_TYPES_OK )		        	// check if DIO return Error 
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	6f 2d       	mov	r22, r15
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 248:	81 11       	cpse	r24, r1
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
 24a:	02 e6       	ldi	r16, 0x62	; 98
	{
		switch ( u8Stat )
		{	
		  case KEYPAD_NO_PRESSED_KEY :
		  {
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
 24c:	f3 94       	inc	r15
 24e:	05 c0       	rjmp	.+10     	; 0x25a <KEYPAD_u8GetPressedKey+0xc8>
	uint8_t Pin_State;
	uint8_t u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES ;

	if ( KeyPressed != NULL )
	{
		switch ( u8Stat )
 250:	0f 2e       	mov	r0, r31
 252:	f5 e0       	ldi	r31, 0x05	; 5
 254:	ff 2e       	mov	r15, r31
 256:	f0 2d       	mov	r31, r0
 258:	00 e0       	ldi	r16, 0x00	; 0
		{	
		  case KEYPAD_NO_PRESSED_KEY :
		  {
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
 25a:	57 e0       	ldi	r21, 0x07	; 7
 25c:	5f 15       	cp	r21, r15
 25e:	08 f0       	brcs	.+2      	; 0x262 <KEYPAD_u8GetPressedKey+0xd0>
 260:	c0 cf       	rjmp	.-128    	; 0x1e2 <KEYPAD_u8GetPressedKey+0x50>
					}
				}
				if ( DIO_u8SetPinData( COL_PORT,col_indx , HIGH ) != STD_TYPES_OK )		        	// check if DIO return Error 
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
			}
			if ( u8ReturnVal != KEYPAD_NO_PRESSED_KEY )
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	c8 16       	cp	r12, r24
 266:	09 f4       	brne	.+2      	; 0x26a <KEYPAD_u8GetPressedKey+0xd8>
 268:	a6 c0       	rjmp	.+332    	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
			{
				u8Stat = KEYPAD_DEBOUNCING ;
 26a:	8d ef       	ldi	r24, 0xFD	; 253
 26c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				if ( TIMER0_u8ISRDelay_ms( 10 , ChangeState ) != STD_TYPES_OK )						// check if TIMER0 return Error 
 270:	63 e7       	ldi	r22, 0x73	; 115
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	8a e0       	ldi	r24, 0x0A	; 10
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 c5 05 	call	0xb8a	; 0xb8a <TIMER0_u8ISRDelay_ms>
 27c:	81 11       	cpse	r24, r1
 27e:	9a c0       	rjmp	.+308    	; 0x3b4 <KEYPAD_u8GetPressedKey+0x222>
 280:	9a c0       	rjmp	.+308    	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
		  {
			uint8_t old_value = u8ReturnVal ; 
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
			{
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	6d 2d       	mov	r22, r13
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 28c:	81 11       	cpse	r24, r1
				u8ErrorState = KEYPAD_GetPressedKey_Error ;
 28e:	02 e6       	ldi	r16, 0x62	; 98
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
				{
					if ( DIO_u8GetPinData( ROW_PORT , row_indx , &Pin_State ) != STD_TYPES_OK )	    	// check if DIO return Error
						u8ErrorState = KEYPAD_GetPressedKey_Error ;
 290:	12 e0       	ldi	r17, 0x02	; 2
 292:	23 c0       	rjmp	.+70     	; 0x2da <KEYPAD_u8GetPressedKey+0x148>
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error
				u8ErrorState = KEYPAD_GetPressedKey_Error ;
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
				{
					if ( DIO_u8GetPinData( ROW_PORT , row_indx , &Pin_State ) != STD_TYPES_OK )	    	// check if DIO return Error
 294:	ae 01       	movw	r20, r28
 296:	4f 5f       	subi	r20, 0xFF	; 255
 298:	5f 4f       	sbci	r21, 0xFF	; 255
 29a:	61 2f       	mov	r22, r17
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_u8GetPinData>
 2a2:	81 11       	cpse	r24, r1
						u8ErrorState = KEYPAD_GetPressedKey_Error ;
 2a4:	02 e6       	ldi	r16, 0x62	; 98
					if( Pin_State == 0 ) /*if true -> PB is pressed*/
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	81 11       	cpse	r24, r1
 2aa:	16 c0       	rjmp	.+44     	; 0x2d8 <KEYPAD_u8GetPressedKey+0x146>
					{
						u8ReturnVal =  u8KEYPAD_Arr[row_indx-ROW_S][col_indx-COL_S];
 2ac:	81 2f       	mov	r24, r17
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 97       	sbiw	r24, 0x02	; 2
 2b2:	2d 2d       	mov	r18, r13
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	25 50       	subi	r18, 0x05	; 5
 2b8:	31 09       	sbc	r19, r1
 2ba:	ac 01       	movw	r20, r24
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	84 0f       	add	r24, r20
 2c2:	95 1f       	adc	r25, r21
 2c4:	e1 e0       	ldi	r30, 0x01	; 1
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ec 0f       	add	r30, r28
 2ca:	fd 1f       	adc	r31, r29
 2cc:	8e 0f       	add	r24, r30
 2ce:	9f 1f       	adc	r25, r31
 2d0:	fc 01       	movw	r30, r24
 2d2:	e2 0f       	add	r30, r18
 2d4:	f3 1f       	adc	r31, r19
 2d6:	c1 80       	ldd	r12, Z+1	; 0x01
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
			{
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error
				u8ErrorState = KEYPAD_GetPressedKey_Error ;
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
 2d8:	1f 5f       	subi	r17, 0xFF	; 255
 2da:	15 30       	cpi	r17, 0x05	; 5
 2dc:	d8 f2       	brcs	.-74     	; 0x294 <KEYPAD_u8GetPressedKey+0x102>
					if( Pin_State == 0 ) /*if true -> PB is pressed*/
					{
						u8ReturnVal =  u8KEYPAD_Arr[row_indx-ROW_S][col_indx-COL_S];
					}
				}
				if ( DIO_u8SetPinData( COL_PORT,col_indx , HIGH ) != STD_TYPES_OK )		        	// check if DIO return Error
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	6d 2d       	mov	r22, r13
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 2e8:	81 11       	cpse	r24, r1
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
 2ea:	02 e6       	ldi	r16, 0x62	; 98
			break ; 
	 	  }
		  case KEYPAD_DEBOUNCING :
		  {
			uint8_t old_value = u8ReturnVal ; 
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
 2ec:	d3 94       	inc	r13
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <KEYPAD_u8GetPressedKey+0x168>
	uint8_t Pin_State;
	uint8_t u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES ;

	if ( KeyPressed != NULL )
	{
		switch ( u8Stat )
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f5 e0       	ldi	r31, 0x05	; 5
 2f4:	df 2e       	mov	r13, r31
 2f6:	f0 2d       	mov	r31, r0
 2f8:	00 e0       	ldi	r16, 0x00	; 0
			break ; 
	 	  }
		  case KEYPAD_DEBOUNCING :
		  {
			uint8_t old_value = u8ReturnVal ; 
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
 2fa:	f7 e0       	ldi	r31, 0x07	; 7
 2fc:	fd 15       	cp	r31, r13
 2fe:	08 f0       	brcs	.+2      	; 0x302 <KEYPAD_u8GetPressedKey+0x170>
 300:	c0 cf       	rjmp	.-128    	; 0x282 <KEYPAD_u8GetPressedKey+0xf0>
					}
				}
				if ( DIO_u8SetPinData( COL_PORT,col_indx , HIGH ) != STD_TYPES_OK )		        	// check if DIO return Error
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
			}	
			if (( u8Stat == KEYPAD_PRESSED ) && ( u8ReturnVal == old_value ))
 302:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 306:	8e 3f       	cpi	r24, 0xFE	; 254
 308:	19 f4       	brne	.+6      	; 0x310 <KEYPAD_u8GetPressedKey+0x17e>
			{
				*KeyPressed = u8ReturnVal;			
 30a:	f7 01       	movw	r30, r14
 30c:	c0 82       	st	Z, r12
 30e:	53 c0       	rjmp	.+166    	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
			}
			else
			{
				*KeyPressed = KEYPAD_DEBOUNCING ;
 310:	8d ef       	ldi	r24, 0xFD	; 253
 312:	f7 01       	movw	r30, r14
 314:	80 83       	st	Z, r24
 316:	4f c0       	rjmp	.+158    	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
		  {
			u8ReturnVal = KEYPAD_NO_PRESSED_KEY  ;
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
			{
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	6d 2d       	mov	r22, r13
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 322:	81 11       	cpse	r24, r1
				u8ErrorState = KEYPAD_GetPressedKey_Error ;
 324:	02 e6       	ldi	r16, 0x62	; 98
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
				{
					if ( DIO_u8GetPinData( ROW_PORT , row_indx , &Pin_State ) != STD_TYPES_OK )	    	// check if DIO return Error
						u8ErrorState = KEYPAD_GetPressedKey_Error ;
 326:	12 e0       	ldi	r17, 0x02	; 2
 328:	23 c0       	rjmp	.+70     	; 0x370 <KEYPAD_u8GetPressedKey+0x1de>
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error
				u8ErrorState = KEYPAD_GetPressedKey_Error ;
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
				{
					if ( DIO_u8GetPinData( ROW_PORT , row_indx , &Pin_State ) != STD_TYPES_OK )	    	// check if DIO return Error
 32a:	ae 01       	movw	r20, r28
 32c:	4f 5f       	subi	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255
 330:	61 2f       	mov	r22, r17
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 49 05 	call	0xa92	; 0xa92 <DIO_u8GetPinData>
 338:	81 11       	cpse	r24, r1
						u8ErrorState = KEYPAD_GetPressedKey_Error ;
 33a:	02 e6       	ldi	r16, 0x62	; 98
					if( Pin_State == 0 ) /*if true -> PB is pressed*/
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	81 11       	cpse	r24, r1
 340:	16 c0       	rjmp	.+44     	; 0x36e <KEYPAD_u8GetPressedKey+0x1dc>
					{
						u8ReturnVal =  u8KEYPAD_Arr[row_indx-ROW_S][col_indx-COL_S];
 342:	21 2f       	mov	r18, r17
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	22 50       	subi	r18, 0x02	; 2
 348:	31 09       	sbc	r19, r1
 34a:	8d 2d       	mov	r24, r13
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	05 97       	sbiw	r24, 0x05	; 5
 350:	a9 01       	movw	r20, r18
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	24 0f       	add	r18, r20
 358:	35 1f       	adc	r19, r21
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	4c 0f       	add	r20, r28
 360:	5d 1f       	adc	r21, r29
 362:	24 0f       	add	r18, r20
 364:	35 1f       	adc	r19, r21
 366:	f9 01       	movw	r30, r18
 368:	e8 0f       	add	r30, r24
 36a:	f9 1f       	adc	r31, r25
 36c:	c1 80       	ldd	r12, Z+1	; 0x01
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
			{
				/*select column and output low*/
				if ( DIO_u8SetPinData( COL_PORT , col_indx , LOW ) != STD_TYPES_OK )				// check if DIO return Error
				u8ErrorState = KEYPAD_GetPressedKey_Error ;
				for ( row_indx = ROW_S ; row_indx < ROW_E ; row_indx++ )
 36e:	1f 5f       	subi	r17, 0xFF	; 255
 370:	15 30       	cpi	r17, 0x05	; 5
 372:	d8 f2       	brcs	.-74     	; 0x32a <KEYPAD_u8GetPressedKey+0x198>
					if( Pin_State == 0 ) /*if true -> PB is pressed*/
					{
						u8ReturnVal =  u8KEYPAD_Arr[row_indx-ROW_S][col_indx-COL_S];
					}
				}
				if ( DIO_u8SetPinData( COL_PORT,col_indx , HIGH ) != STD_TYPES_OK )		        	// check if DIO return Error
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	6d 2d       	mov	r22, r13
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
 37e:	81 11       	cpse	r24, r1
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
 380:	02 e6       	ldi	r16, 0x62	; 98
			break ;
		  }
		  case KEYPAD_PRESSED :
		  {
			u8ReturnVal = KEYPAD_NO_PRESSED_KEY  ;
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
 382:	d3 94       	inc	r13
 384:	07 c0       	rjmp	.+14     	; 0x394 <KEYPAD_u8GetPressedKey+0x202>
	uint8_t Pin_State;
	uint8_t u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES ;

	if ( KeyPressed != NULL )
	{
		switch ( u8Stat )
 386:	0f 2e       	mov	r0, r31
 388:	f5 e0       	ldi	r31, 0x05	; 5
 38a:	df 2e       	mov	r13, r31
 38c:	f0 2d       	mov	r31, r0
 38e:	cc 24       	eor	r12, r12
 390:	ca 94       	dec	r12
 392:	00 e0       	ldi	r16, 0x00	; 0
			break ;
		  }
		  case KEYPAD_PRESSED :
		  {
			u8ReturnVal = KEYPAD_NO_PRESSED_KEY  ;
			for ( col_indx = COL_S ; col_indx < COL_E ; col_indx++ )
 394:	57 e0       	ldi	r21, 0x07	; 7
 396:	5d 15       	cp	r21, r13
 398:	08 f0       	brcs	.+2      	; 0x39c <KEYPAD_u8GetPressedKey+0x20a>
 39a:	be cf       	rjmp	.-132    	; 0x318 <KEYPAD_u8GetPressedKey+0x186>
					}
				}
				if ( DIO_u8SetPinData( COL_PORT,col_indx , HIGH ) != STD_TYPES_OK )		        	// check if DIO return Error
					u8ErrorState = KEYPAD_GetPressedKey_Error ;
			}	
			*KeyPressed = KEYPAD_NO_PRESSED_KEY ;
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	f7 01       	movw	r30, r14
 3a0:	80 83       	st	Z, r24
			if ( u8ReturnVal == KEYPAD_NO_PRESSED_KEY )
 3a2:	c8 12       	cpse	r12, r24
 3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
			{
				u8Stat = KEYPAD_NO_PRESSED_KEY ;
 3a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
			break ;
		}
	}
	else
	{
		u8ErrorState = KEYPAD_GetPressedKey_Error ;
 3ac:	02 e6       	ldi	r16, 0x62	; 98
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
}

// function to check which key is pressed 
uint8_t KEYPAD_u8GetPressedKey(uint8_t* KeyPressed)
{
	uint8_t u8ErrorState = STD_TYPES_OK;
 3b0:	00 e0       	ldi	r16, 0x00	; 0
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <KEYPAD_u8GetPressedKey+0x224>
			}
			if ( u8ReturnVal != KEYPAD_NO_PRESSED_KEY )
			{
				u8Stat = KEYPAD_DEBOUNCING ;
				if ( TIMER0_u8ISRDelay_ms( 10 , ChangeState ) != STD_TYPES_OK )						// check if TIMER0 return Error 
						u8ErrorState = KEYPAD_GetPressedKey_Error ;
 3b4:	02 e6       	ldi	r16, 0x62	; 98
	else
	{
		u8ErrorState = KEYPAD_GetPressedKey_Error ;
	}
	return u8ErrorState;
}
 3b6:	80 2f       	mov	r24, r16
 3b8:	2a 96       	adiw	r28, 0x0a	; 10
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	ff 90       	pop	r15
 3ce:	ef 90       	pop	r14
 3d0:	df 90       	pop	r13
 3d2:	cf 90       	pop	r12
 3d4:	08 95       	ret

000003d6 <Change_LCD_State>:
	return u8ErrorState ;	
}

void Change_LCD_State(void)
{
	switch ( LCD_State )
 3d6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <LCD_State>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	79 f0       	breq	.+30     	; 0x3fc <Change_LCD_State+0x26>
 3de:	18 f0       	brcs	.+6      	; 0x3e6 <Change_LCD_State+0x10>
 3e0:	8f 3f       	cpi	r24, 0xFF	; 255
 3e2:	c1 f0       	breq	.+48     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3e4:	08 95       	ret
	{
		case FIRST_NIBBLE :
			LCD_State = SECOND_NIBBLE ;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <LCD_State>
			delay_finished = HIGH ;
 3ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <delay_finished>
			DIO_u8SetPinData(E_PORT,E_PIN,LOW);
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	63 e0       	ldi	r22, 0x03	; 3
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			break;
 3fa:	08 95       	ret
		case SECOND_NIBBLE :
			LCD_State = FINISHED ;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <LCD_State>
			delay_finished = HIGH ;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <delay_finished>
			DIO_u8SetPinData(E_PORT,E_PIN,LOW);
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			break;
 412:	08 95       	ret
		case FINISHED :
			LCD_State = FIRST_NIBBLE ;
 414:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <LCD_State>
			delay_finished = HIGH ;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <delay_finished>
			TIMER2_u8Stop();
 41e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TIMER2_u8Stop>
 422:	08 95       	ret

00000424 <LCD_u8SendCommand>:
   }
   return u8Errorstate ;
}

uint8_t LCD_u8SendCommand(uint8_t command)
{
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
	uint8_t u8ErrorState = STD_TYPES_OK ;
	uint8_t bit ;
	switch ( LCD_State )
 428:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <LCD_State>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	09 f4       	brne	.+2      	; 0x432 <LCD_u8SendCommand+0xe>
 430:	47 c0       	rjmp	.+142    	; 0x4c0 <LCD_u8SendCommand+0x9c>
 432:	20 f0       	brcs	.+8      	; 0x43c <LCD_u8SendCommand+0x18>
 434:	8f 3f       	cpi	r24, 0xFF	; 255
 436:	09 f4       	brne	.+2      	; 0x43a <LCD_u8SendCommand+0x16>
 438:	82 c0       	rjmp	.+260    	; 0x53e <LCD_u8SendCommand+0x11a>
 43a:	8f c0       	rjmp	.+286    	; 0x55a <LCD_u8SendCommand+0x136>
	{
	case FIRST_NIBBLE :
	{
		if ( u8ErrorState == STD_TYPES_OK )
		{
			bit = GET_BIT(command, 4);
 43c:	c4 fb       	bst	r28, 4
 43e:	44 27       	eor	r20, r20
 440:	40 f9       	bld	r20, 0
			u8ErrorState = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);			
 442:	64 e0       	ldi	r22, 0x04	; 4
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 44a:	81 11       	cpse	r24, r1
 44c:	06 c0       	rjmp	.+12     	; 0x45a <LCD_u8SendCommand+0x36>
		{
			bit = GET_BIT(command, 5);
 44e:	c5 fb       	bst	r28, 5
 450:	44 27       	eor	r20, r20
 452:	40 f9       	bld	r20, 0
			u8ErrorState = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
 454:	65 e0       	ldi	r22, 0x05	; 5
 456:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}

		if ( u8ErrorState == STD_TYPES_OK )
 45a:	81 11       	cpse	r24, r1
 45c:	06 c0       	rjmp	.+12     	; 0x46a <LCD_u8SendCommand+0x46>
		{
			bit = GET_BIT(command, 6);
 45e:	c6 fb       	bst	r28, 6
 460:	44 27       	eor	r20, r20
 462:	40 f9       	bld	r20, 0
			u8ErrorState = DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
 464:	66 e0       	ldi	r22, 0x06	; 6
 466:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 46a:	81 11       	cpse	r24, r1
 46c:	07 c0       	rjmp	.+14     	; 0x47c <LCD_u8SendCommand+0x58>
		{
			bit = GET_BIT(command, 7);
 46e:	4c 2f       	mov	r20, r28
 470:	44 1f       	adc	r20, r20
 472:	44 27       	eor	r20, r20
 474:	44 1f       	adc	r20, r20
			u8ErrorState = DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
 476:	67 e0       	ldi	r22, 0x07	; 7
 478:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 47c:	81 11       	cpse	r24, r1
 47e:	04 c0       	rjmp	.+8      	; 0x488 <LCD_u8SendCommand+0x64>
		{
			u8ErrorState = DIO_u8SetPinData(RS_PORT,RS_PIN,LOW);
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 488:	81 11       	cpse	r24, r1
 48a:	04 c0       	rjmp	.+8      	; 0x494 <LCD_u8SendCommand+0x70>
		{
			u8ErrorState = DIO_u8SetPinData(RW_PORT,RW_PIN,LOW);
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 494:	81 11       	cpse	r24, r1
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <LCD_u8SendCommand+0x7c>
		{
			u8ErrorState = DIO_u8SetPinData(E_PORT,E_PIN,HIGH);
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	63 e0       	ldi	r22, 0x03	; 3
 49c:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if (( delay_finished ) && ( u8ErrorState == STD_TYPES_OK ))
 4a0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <delay_finished>
 4a4:	99 23       	and	r25, r25
 4a6:	09 f4       	brne	.+2      	; 0x4aa <LCD_u8SendCommand+0x86>
 4a8:	5b c0       	rjmp	.+182    	; 0x560 <LCD_u8SendCommand+0x13c>
 4aa:	81 11       	cpse	r24, r1
 4ac:	59 c0       	rjmp	.+178    	; 0x560 <LCD_u8SendCommand+0x13c>
		{
			u8ErrorState = TIMER2_u8ISRDelay_ms(3,Change_LCD_State);
 4ae:	6b ee       	ldi	r22, 0xEB	; 235
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMER2_u8ISRDelay_ms>
			delay_finished = LOW ;
 4ba:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <delay_finished>
 4be:	50 c0       	rjmp	.+160    	; 0x560 <LCD_u8SendCommand+0x13c>
	}
	case SECOND_NIBBLE :
	{	
		if ( u8ErrorState == STD_TYPES_OK )
		{
			bit = GET_BIT(command, 0);
 4c0:	4c 2f       	mov	r20, r28
 4c2:	41 70       	andi	r20, 0x01	; 1
			u8ErrorState = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
 4c4:	64 e0       	ldi	r22, 0x04	; 4
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 4cc:	81 11       	cpse	r24, r1
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <LCD_u8SendCommand+0xb8>
		{
			bit = GET_BIT(command, 1);
 4d0:	c1 fb       	bst	r28, 1
 4d2:	44 27       	eor	r20, r20
 4d4:	40 f9       	bld	r20, 0
			u8ErrorState = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
 4d6:	65 e0       	ldi	r22, 0x05	; 5
 4d8:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 4dc:	81 11       	cpse	r24, r1
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <LCD_u8SendCommand+0xc8>
		{
			bit = GET_BIT(command, 2);
 4e0:	c2 fb       	bst	r28, 2
 4e2:	44 27       	eor	r20, r20
 4e4:	40 f9       	bld	r20, 0
			u8ErrorState = DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
 4e6:	66 e0       	ldi	r22, 0x06	; 6
 4e8:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 4ec:	81 11       	cpse	r24, r1
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <LCD_u8SendCommand+0xd8>
		{
			bit = GET_BIT(command, 3);
 4f0:	c3 fb       	bst	r28, 3
 4f2:	44 27       	eor	r20, r20
 4f4:	40 f9       	bld	r20, 0
			u8ErrorState = DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
 4f6:	67 e0       	ldi	r22, 0x07	; 7
 4f8:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 4fc:	81 11       	cpse	r24, r1
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <LCD_u8SendCommand+0xe4>
		{
			u8ErrorState = DIO_u8SetPinData(RS_PORT,RS_PIN,LOW);
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 508:	81 11       	cpse	r24, r1
 50a:	04 c0       	rjmp	.+8      	; 0x514 <LCD_u8SendCommand+0xf0>
		{
			u8ErrorState = DIO_u8SetPinData(RW_PORT,RW_PIN,LOW);
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if ( u8ErrorState == STD_TYPES_OK )
 514:	81 11       	cpse	r24, r1
 516:	04 c0       	rjmp	.+8      	; 0x520 <LCD_u8SendCommand+0xfc>
		{
			u8ErrorState = DIO_u8SetPinData(E_PORT,E_PIN,HIGH);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	63 e0       	ldi	r22, 0x03	; 3
 51c:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
		}
		if (( delay_finished ) && ( u8ErrorState == STD_TYPES_OK ))
 520:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <delay_finished>
 524:	99 23       	and	r25, r25
 526:	e1 f0       	breq	.+56     	; 0x560 <LCD_u8SendCommand+0x13c>
 528:	81 11       	cpse	r24, r1
 52a:	1a c0       	rjmp	.+52     	; 0x560 <LCD_u8SendCommand+0x13c>
		{
			u8ErrorState = TIMER2_u8ISRDelay_ms(3,Change_LCD_State);
 52c:	6b ee       	ldi	r22, 0xEB	; 235
 52e:	71 e0       	ldi	r23, 0x01	; 1
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMER2_u8ISRDelay_ms>
			delay_finished = LOW ;
 538:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <delay_finished>
 53c:	11 c0       	rjmp	.+34     	; 0x560 <LCD_u8SendCommand+0x13c>
		}
		break;
	}
	case FINISHED :
	{
		if (( delay_finished ) && ( u8ErrorState == STD_TYPES_OK ))
 53e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <delay_finished>
 542:	88 23       	and	r24, r24
 544:	61 f0       	breq	.+24     	; 0x55e <LCD_u8SendCommand+0x13a>
		{
			u8ErrorState = TIMER2_u8ISRDelay_ms(1,Change_LCD_State);
 546:	6b ee       	ldi	r22, 0xEB	; 235
 548:	71 e0       	ldi	r23, 0x01	; 1
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMER2_u8ISRDelay_ms>
			delay_finished = LOW ;
 552:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <delay_finished>
			u8ErrorState = FINISHED ;
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	03 c0       	rjmp	.+6      	; 0x560 <LCD_u8SendCommand+0x13c>
   return u8Errorstate ;
}

uint8_t LCD_u8SendCommand(uint8_t command)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	01 c0       	rjmp	.+2      	; 0x560 <LCD_u8SendCommand+0x13c>
 55e:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}
	}
	return u8ErrorState ;
}
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <LCD_u8Init>:
uint8_t LCD_State = FIRST_NIBBLE ;
uint8_t init_State = FIRST_COMMAND ;
uint8_t delay_finished = HIGH ;

uint8_t LCD_u8Init(void) 
{	
 564:	cf 93       	push	r28
	TIMER2_u8Init();
 566:	0e 94 2c 06 	call	0xc58	; 0xc58 <TIMER2_u8Init>
	uint8_t u8Errorstate = STD_TYPES_OK ;
	if ( DIO_u8SetPinDirection( RS_PORT , RS_PIN , OUTPUTPIN ) != STD_TYPES_OK )
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 574:	81 11       	cpse	r24, r1
 576:	02 c0       	rjmp	.+4      	; 0x57c <LCD_u8Init+0x18>
uint8_t delay_finished = HIGH ;

uint8_t LCD_u8Init(void) 
{	
	TIMER2_u8Init();
	uint8_t u8Errorstate = STD_TYPES_OK ;
 578:	c0 e0       	ldi	r28, 0x00	; 0
 57a:	01 c0       	rjmp	.+2      	; 0x57e <LCD_u8Init+0x1a>
	if ( DIO_u8SetPinDirection( RS_PORT , RS_PIN , OUTPUTPIN ) != STD_TYPES_OK )
		u8Errorstate = LCD_Init_Error ;
 57c:	c1 e7       	ldi	r28, 0x71	; 113
	if ( DIO_u8SetPinDirection( RW_PORT , RW_PIN , OUTPUTPIN ) != STD_TYPES_OK )
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	62 e0       	ldi	r22, 0x02	; 2
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 588:	81 11       	cpse	r24, r1
		u8Errorstate = LCD_Init_Error ;
 58a:	c1 e7       	ldi	r28, 0x71	; 113
	if ( DIO_u8SetPinDirection( E_PORT , E_PIN , OUTPUTPIN ) != STD_TYPES_OK )
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	63 e0       	ldi	r22, 0x03	; 3
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 596:	81 11       	cpse	r24, r1
		u8Errorstate = LCD_Init_Error ;
 598:	c1 e7       	ldi	r28, 0x71	; 113
	if ( DIO_u8SetPinDirection( D4_PORT , D4_PIN , OUTPUTPIN ) != STD_TYPES_OK )
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	64 e0       	ldi	r22, 0x04	; 4
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 5a4:	81 11       	cpse	r24, r1
		u8Errorstate = LCD_Init_Error ;
 5a6:	c1 e7       	ldi	r28, 0x71	; 113
	if ( DIO_u8SetPinDirection( D5_PORT , D5_PIN , OUTPUTPIN ) != STD_TYPES_OK )
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	65 e0       	ldi	r22, 0x05	; 5
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 5b2:	81 11       	cpse	r24, r1
		u8Errorstate = LCD_Init_Error ;
 5b4:	c1 e7       	ldi	r28, 0x71	; 113
	if ( DIO_u8SetPinDirection( D6_PORT , D6_PIN , OUTPUTPIN ) != STD_TYPES_OK )
 5b6:	41 e0       	ldi	r20, 0x01	; 1
 5b8:	66 e0       	ldi	r22, 0x06	; 6
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 5c0:	81 11       	cpse	r24, r1
		u8Errorstate = LCD_Init_Error ;
 5c2:	c1 e7       	ldi	r28, 0x71	; 113
	if ( DIO_u8SetPinDirection( D7_PORT , D7_PIN , OUTPUTPIN ) != STD_TYPES_OK )
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	67 e0       	ldi	r22, 0x07	; 7
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8SetPinDirection>
 5ce:	81 11       	cpse	r24, r1
		u8Errorstate = LCD_Init_Error ;		
 5d0:	c1 e7       	ldi	r28, 0x71	; 113
   switch ( init_State )
 5d2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 5d6:	83 30       	cpi	r24, 0x03	; 3
 5d8:	49 f1       	breq	.+82     	; 0x62c <LCD_u8Init+0xc8>
 5da:	20 f4       	brcc	.+8      	; 0x5e4 <LCD_u8Init+0x80>
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	91 f0       	breq	.+36     	; 0x604 <LCD_u8Init+0xa0>
 5e0:	38 f0       	brcs	.+14     	; 0x5f0 <LCD_u8Init+0x8c>
 5e2:	1a c0       	rjmp	.+52     	; 0x618 <LCD_u8Init+0xb4>
 5e4:	85 30       	cpi	r24, 0x05	; 5
 5e6:	b1 f1       	breq	.+108    	; 0x654 <LCD_u8Init+0xf0>
 5e8:	58 f1       	brcs	.+86     	; 0x640 <LCD_u8Init+0xdc>
 5ea:	8f 3f       	cpi	r24, 0xFF	; 255
 5ec:	e1 f1       	breq	.+120    	; 0x666 <LCD_u8Init+0x102>
 5ee:	3e c0       	rjmp	.+124    	; 0x66c <LCD_u8Init+0x108>
   {
    case FIRST_COMMAND :	 
    {  		
		if ( LCD_u8SendCommand(0x33) == FINISHED )
 5f0:	83 e3       	ldi	r24, 0x33	; 51
 5f2:	0e 94 12 02 	call	0x424	; 0x424 <LCD_u8SendCommand>
 5f6:	8f 3f       	cpi	r24, 0xFF	; 255
 5f8:	c9 f5       	brne	.+114    	; 0x66c <LCD_u8Init+0x108>
		{
			init_State = SECOND_COMMAND ;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			u8Errorstate = LCD_Init_Error ;
 600:	c1 e7       	ldi	r28, 0x71	; 113
 602:	34 c0       	rjmp	.+104    	; 0x66c <LCD_u8Init+0x108>
		}
		break;
    }
	case SECOND_COMMAND :
	{
		if ( LCD_u8SendCommand(0x32) == FINISHED )
 604:	82 e3       	ldi	r24, 0x32	; 50
 606:	0e 94 12 02 	call	0x424	; 0x424 <LCD_u8SendCommand>
 60a:	8f 3f       	cpi	r24, 0xFF	; 255
 60c:	79 f5       	brne	.+94     	; 0x66c <LCD_u8Init+0x108>
		{
			init_State = THIRD_COMMAND ;
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			u8Errorstate = LCD_Init_Error ;
 614:	c1 e7       	ldi	r28, 0x71	; 113
 616:	2a c0       	rjmp	.+84     	; 0x66c <LCD_u8Init+0x108>
		}
		break;
	}
	case THIRD_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_MODE_4BIT_2LINES) == FINISHED )
 618:	88 e2       	ldi	r24, 0x28	; 40
 61a:	0e 94 12 02 	call	0x424	; 0x424 <LCD_u8SendCommand>
 61e:	8f 3f       	cpi	r24, 0xFF	; 255
 620:	29 f5       	brne	.+74     	; 0x66c <LCD_u8Init+0x108>
		{
			u8Errorstate = LCD_Init_Error ;
			init_State = FOURTH_COMMAND ;
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	}
	case THIRD_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_MODE_4BIT_2LINES) == FINISHED )
		{
			u8Errorstate = LCD_Init_Error ;
 628:	c1 e7       	ldi	r28, 0x71	; 113
 62a:	20 c0       	rjmp	.+64     	; 0x66c <LCD_u8Init+0x108>
		}
		break;
	}
	case FOURTH_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_DISP_ON) == FINISHED )
 62c:	8c e0       	ldi	r24, 0x0C	; 12
 62e:	0e 94 12 02 	call	0x424	; 0x424 <LCD_u8SendCommand>
 632:	8f 3f       	cpi	r24, 0xFF	; 255
 634:	d9 f4       	brne	.+54     	; 0x66c <LCD_u8Init+0x108>
		{
			u8Errorstate = LCD_Init_Error ;
			init_State = FIFTH_COMMAND ;
 636:	84 e0       	ldi	r24, 0x04	; 4
 638:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	}
	case FOURTH_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_DISP_ON) == FINISHED )
		{
			u8Errorstate = LCD_Init_Error ;
 63c:	c1 e7       	ldi	r28, 0x71	; 113
 63e:	16 c0       	rjmp	.+44     	; 0x66c <LCD_u8Init+0x108>
		}	
		break;
	}
	case FIFTH_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_ENTRY_MODE) == FINISHED )
 640:	86 e0       	ldi	r24, 0x06	; 6
 642:	0e 94 12 02 	call	0x424	; 0x424 <LCD_u8SendCommand>
 646:	8f 3f       	cpi	r24, 0xFF	; 255
 648:	89 f4       	brne	.+34     	; 0x66c <LCD_u8Init+0x108>
		{
			u8Errorstate = LCD_Init_Error ;
			init_State = SIXTH_COMMAND;
 64a:	85 e0       	ldi	r24, 0x05	; 5
 64c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	}
	case FIFTH_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_ENTRY_MODE) == FINISHED )
		{
			u8Errorstate = LCD_Init_Error ;
 650:	c1 e7       	ldi	r28, 0x71	; 113
 652:	0c c0       	rjmp	.+24     	; 0x66c <LCD_u8Init+0x108>
		}	
		break;
	}
	case SIXTH_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_CLEAR) == FINISHED )
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 12 02 	call	0x424	; 0x424 <LCD_u8SendCommand>
 65a:	8f 3f       	cpi	r24, 0xFF	; 255
 65c:	39 f4       	brne	.+14     	; 0x66c <LCD_u8Init+0x108>
		{
			u8Errorstate = LCD_Init_Error ;
			init_State = FINISHED ;
 65e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	}
	case SIXTH_COMMAND :
	{
		if ( LCD_u8SendCommand(LCD_CLEAR) == FINISHED )
		{
			u8Errorstate = LCD_Init_Error ;
 662:	c1 e7       	ldi	r28, 0x71	; 113
 664:	03 c0       	rjmp	.+6      	; 0x66c <LCD_u8Init+0x108>
		break;	
	} 
	case FINISHED :
	{
		u8Errorstate = FINISHED ;
		init_State = FIRST_COMMAND ;
 666:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
		}
		break;	
	} 
	case FINISHED :
	{
		u8Errorstate = FINISHED ;
 66a:	cf ef       	ldi	r28, 0xFF	; 255
		init_State = FIRST_COMMAND ;
		break;
	}	
   }
   return u8Errorstate ;
}
 66c:	8c 2f       	mov	r24, r28
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <LCD_u8SendData>:
	}
	return u8ErrorState ;
}

uint8_t LCD_u8SendData(uint8_t data) 
{
 672:	cf 93       	push	r28
 674:	c8 2f       	mov	r28, r24
	uint8_t u8ErrorState = STD_TYPES_OK ;
	uint8_t bit ;
	switch ( LCD_State )
 676:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <LCD_State>
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	09 f4       	brne	.+2      	; 0x680 <LCD_u8SendData+0xe>
 67e:	47 c0       	rjmp	.+142    	; 0x70e <LCD_u8SendData+0x9c>
 680:	20 f0       	brcs	.+8      	; 0x68a <LCD_u8SendData+0x18>
 682:	8f 3f       	cpi	r24, 0xFF	; 255
 684:	09 f4       	brne	.+2      	; 0x688 <LCD_u8SendData+0x16>
 686:	82 c0       	rjmp	.+260    	; 0x78c <LCD_u8SendData+0x11a>
 688:	8f c0       	rjmp	.+286    	; 0x7a8 <LCD_u8SendData+0x136>
	{
		case FIRST_NIBBLE :
		{
			if ( u8ErrorState == STD_TYPES_OK )
			{
				bit = GET_BIT(data, 4);
 68a:	c4 fb       	bst	r28, 4
 68c:	44 27       	eor	r20, r20
 68e:	40 f9       	bld	r20, 0
				u8ErrorState = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
 690:	64 e0       	ldi	r22, 0x04	; 4
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 698:	81 11       	cpse	r24, r1
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <LCD_u8SendData+0x36>
			{
				bit = GET_BIT(data, 5);
 69c:	c5 fb       	bst	r28, 5
 69e:	44 27       	eor	r20, r20
 6a0:	40 f9       	bld	r20, 0
				u8ErrorState = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
 6a2:	65 e0       	ldi	r22, 0x05	; 5
 6a4:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 6a8:	81 11       	cpse	r24, r1
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <LCD_u8SendData+0x46>
			{
				bit = GET_BIT(data, 6);
 6ac:	c6 fb       	bst	r28, 6
 6ae:	44 27       	eor	r20, r20
 6b0:	40 f9       	bld	r20, 0
				u8ErrorState = DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
 6b2:	66 e0       	ldi	r22, 0x06	; 6
 6b4:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 6b8:	81 11       	cpse	r24, r1
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <LCD_u8SendData+0x58>
			{
				bit = GET_BIT(data, 7);
 6bc:	4c 2f       	mov	r20, r28
 6be:	44 1f       	adc	r20, r20
 6c0:	44 27       	eor	r20, r20
 6c2:	44 1f       	adc	r20, r20
				u8ErrorState = DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
 6c4:	67 e0       	ldi	r22, 0x07	; 7
 6c6:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 6ca:	81 11       	cpse	r24, r1
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <LCD_u8SendData+0x64>
			{
				u8ErrorState = DIO_u8SetPinData(RS_PORT,RS_PIN,HIGH);
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 6d6:	81 11       	cpse	r24, r1
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <LCD_u8SendData+0x70>
			{
				u8ErrorState = DIO_u8SetPinData(RW_PORT,RW_PIN,LOW);
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	62 e0       	ldi	r22, 0x02	; 2
 6de:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 6e2:	81 11       	cpse	r24, r1
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <LCD_u8SendData+0x7c>
			{
				u8ErrorState = DIO_u8SetPinData(E_PORT,E_PIN,HIGH);
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	63 e0       	ldi	r22, 0x03	; 3
 6ea:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if (( delay_finished ) && ( u8ErrorState == STD_TYPES_OK ))
 6ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <delay_finished>
 6f2:	99 23       	and	r25, r25
 6f4:	09 f4       	brne	.+2      	; 0x6f8 <LCD_u8SendData+0x86>
 6f6:	5b c0       	rjmp	.+182    	; 0x7ae <LCD_u8SendData+0x13c>
 6f8:	81 11       	cpse	r24, r1
 6fa:	59 c0       	rjmp	.+178    	; 0x7ae <LCD_u8SendData+0x13c>
			{
				u8ErrorState = TIMER2_u8ISRDelay_ms(3,Change_LCD_State);
 6fc:	6b ee       	ldi	r22, 0xEB	; 235
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	83 e0       	ldi	r24, 0x03	; 3
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMER2_u8ISRDelay_ms>
				delay_finished = LOW ;
 708:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <delay_finished>
 70c:	50 c0       	rjmp	.+160    	; 0x7ae <LCD_u8SendData+0x13c>
		}
		case SECOND_NIBBLE :
		{
			if ( u8ErrorState == STD_TYPES_OK )
			{
				bit = GET_BIT(data, 0);
 70e:	4c 2f       	mov	r20, r28
 710:	41 70       	andi	r20, 0x01	; 1
				u8ErrorState = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
 712:	64 e0       	ldi	r22, 0x04	; 4
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 71a:	81 11       	cpse	r24, r1
 71c:	06 c0       	rjmp	.+12     	; 0x72a <LCD_u8SendData+0xb8>
			{
				bit = GET_BIT(data, 1);
 71e:	c1 fb       	bst	r28, 1
 720:	44 27       	eor	r20, r20
 722:	40 f9       	bld	r20, 0
				u8ErrorState = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
 724:	65 e0       	ldi	r22, 0x05	; 5
 726:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 72a:	81 11       	cpse	r24, r1
 72c:	06 c0       	rjmp	.+12     	; 0x73a <LCD_u8SendData+0xc8>
			{
				bit = GET_BIT(data, 2);
 72e:	c2 fb       	bst	r28, 2
 730:	44 27       	eor	r20, r20
 732:	40 f9       	bld	r20, 0
				u8ErrorState = DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
 734:	66 e0       	ldi	r22, 0x06	; 6
 736:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 73a:	81 11       	cpse	r24, r1
 73c:	06 c0       	rjmp	.+12     	; 0x74a <LCD_u8SendData+0xd8>
			{
				bit = GET_BIT(data, 3);
 73e:	c3 fb       	bst	r28, 3
 740:	44 27       	eor	r20, r20
 742:	40 f9       	bld	r20, 0
				u8ErrorState = DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
 744:	67 e0       	ldi	r22, 0x07	; 7
 746:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 74a:	81 11       	cpse	r24, r1
 74c:	04 c0       	rjmp	.+8      	; 0x756 <LCD_u8SendData+0xe4>
			{
				u8ErrorState = DIO_u8SetPinData(RS_PORT,RS_PIN,HIGH);
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	61 e0       	ldi	r22, 0x01	; 1
 752:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 756:	81 11       	cpse	r24, r1
 758:	04 c0       	rjmp	.+8      	; 0x762 <LCD_u8SendData+0xf0>
			{
				u8ErrorState = DIO_u8SetPinData(RW_PORT,RW_PIN,LOW);
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	62 e0       	ldi	r22, 0x02	; 2
 75e:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if ( u8ErrorState == STD_TYPES_OK )
 762:	81 11       	cpse	r24, r1
 764:	04 c0       	rjmp	.+8      	; 0x76e <LCD_u8SendData+0xfc>
			{
				u8ErrorState = DIO_u8SetPinData(E_PORT,E_PIN,HIGH);
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	63 e0       	ldi	r22, 0x03	; 3
 76a:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_u8SetPinData>
			}
			if (( delay_finished ) && ( u8ErrorState == STD_TYPES_OK ))
 76e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <delay_finished>
 772:	99 23       	and	r25, r25
 774:	e1 f0       	breq	.+56     	; 0x7ae <LCD_u8SendData+0x13c>
 776:	81 11       	cpse	r24, r1
 778:	1a c0       	rjmp	.+52     	; 0x7ae <LCD_u8SendData+0x13c>
			{
				u8ErrorState = TIMER2_u8ISRDelay_ms(3,Change_LCD_State);
 77a:	6b ee       	ldi	r22, 0xEB	; 235
 77c:	71 e0       	ldi	r23, 0x01	; 1
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMER2_u8ISRDelay_ms>
				delay_finished = LOW ;
 786:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <delay_finished>
 78a:	11 c0       	rjmp	.+34     	; 0x7ae <LCD_u8SendData+0x13c>
			}
			break;
		}
		case FINISHED :
		{
			if (( delay_finished ) && ( u8ErrorState == STD_TYPES_OK ))
 78c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <delay_finished>
 790:	88 23       	and	r24, r24
 792:	61 f0       	breq	.+24     	; 0x7ac <LCD_u8SendData+0x13a>
			{
				u8ErrorState = TIMER2_u8ISRDelay_ms(1,Change_LCD_State);
 794:	6b ee       	ldi	r22, 0xEB	; 235
 796:	71 e0       	ldi	r23, 0x01	; 1
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <TIMER2_u8ISRDelay_ms>
				delay_finished = LOW ;
 7a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <delay_finished>
				u8ErrorState = FINISHED ;
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <LCD_u8SendData+0x13c>
	return u8ErrorState ;
}

uint8_t LCD_u8SendData(uint8_t data) 
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <LCD_u8SendData+0x13c>
 7ac:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
		}
	}
	return u8ErrorState ;
}
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <DIO_u8SetPinDirection>:
			
		default:
			u8ErrorState = GetPortData_Error ;
	}
	return u8ErrorState ;
}
 7b2:	68 30       	cpi	r22, 0x08	; 8
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <DIO_u8SetPinDirection+0x6>
 7b6:	e7 c0       	rjmp	.+462    	; 0x986 <__stack+0x127>
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	09 f4       	brne	.+2      	; 0x7be <DIO_u8SetPinDirection+0xc>
 7bc:	3f c0       	rjmp	.+126    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7be:	38 f0       	brcs	.+14     	; 0x7ce <DIO_u8SetPinDirection+0x1c>
 7c0:	82 30       	cpi	r24, 0x02	; 2
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_u8SetPinDirection+0x14>
 7c4:	72 c0       	rjmp	.+228    	; 0x8aa <__stack+0x4b>
 7c6:	83 30       	cpi	r24, 0x03	; 3
 7c8:	09 f4       	brne	.+2      	; 0x7cc <DIO_u8SetPinDirection+0x1a>
 7ca:	a6 c0       	rjmp	.+332    	; 0x918 <__stack+0xb9>
 7cc:	de c0       	rjmp	.+444    	; 0x98a <__stack+0x12b>
 7ce:	41 30       	cpi	r20, 0x01	; 1
 7d0:	49 f1       	breq	.+82     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7d2:	18 f0       	brcs	.+6      	; 0x7da <DIO_u8SetPinDirection+0x28>
 7d4:	42 30       	cpi	r20, 0x02	; 2
 7d6:	91 f0       	breq	.+36     	; 0x7fc <DIO_u8SetPinDirection+0x4a>
 7d8:	da c0       	rjmp	.+436    	; 0x98e <__stack+0x12f>
 7da:	2a b3       	in	r18, 0x1a	; 26
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_u8SetPinDirection+0x34>
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	6a 95       	dec	r22
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_u8SetPinDirection+0x30>
 7ea:	80 95       	com	r24
 7ec:	92 2f       	mov	r25, r18
 7ee:	98 23       	and	r25, r24
 7f0:	9a bb       	out	0x1a, r25	; 26
 7f2:	9b b3       	in	r25, 0x1b	; 27
 7f4:	89 23       	and	r24, r25
 7f6:	8b bb       	out	0x1b, r24	; 27
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	08 95       	ret
 7fc:	80 b7       	in	r24, 0x30	; 48
 7fe:	8b 7f       	andi	r24, 0xFB	; 251
 800:	80 bf       	out	0x30, r24	; 48
 802:	2a b3       	in	r18, 0x1a	; 26
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	98 2f       	mov	r25, r24
 814:	90 95       	com	r25
 816:	92 23       	and	r25, r18
 818:	9a bb       	out	0x1a, r25	; 26
 81a:	9b b3       	in	r25, 0x1b	; 27
 81c:	89 2b       	or	r24, r25
 81e:	8b bb       	out	0x1b, r24	; 27
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	08 95       	ret
 824:	2a b3       	in	r18, 0x1a	; 26
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	6a 95       	dec	r22
 832:	e2 f7       	brpl	.-8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 834:	82 2b       	or	r24, r18
 836:	8a bb       	out	0x1a, r24	; 26
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	08 95       	ret
 83c:	41 30       	cpi	r20, 0x01	; 1
 83e:	49 f1       	breq	.+82     	; 0x892 <__stack+0x33>
 840:	18 f0       	brcs	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 842:	42 30       	cpi	r20, 0x02	; 2
 844:	91 f0       	breq	.+36     	; 0x86a <__stack+0xb>
 846:	a5 c0       	rjmp	.+330    	; 0x992 <__stack+0x133>
 848:	27 b3       	in	r18, 0x17	; 23
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	6a 95       	dec	r22
 856:	e2 f7       	brpl	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 858:	80 95       	com	r24
 85a:	92 2f       	mov	r25, r18
 85c:	98 23       	and	r25, r24
 85e:	97 bb       	out	0x17, r25	; 23
 860:	98 b3       	in	r25, 0x18	; 24
 862:	89 23       	and	r24, r25
 864:	88 bb       	out	0x18, r24	; 24
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	08 95       	ret
 86a:	80 b7       	in	r24, 0x30	; 48
 86c:	8b 7f       	andi	r24, 0xFB	; 251
 86e:	80 bf       	out	0x30, r24	; 48
 870:	27 b3       	in	r18, 0x17	; 23
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	6a 95       	dec	r22
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	98 2f       	mov	r25, r24
 882:	90 95       	com	r25
 884:	92 23       	and	r25, r18
 886:	97 bb       	out	0x17, r25	; 23
 888:	98 b3       	in	r25, 0x18	; 24
 88a:	89 2b       	or	r24, r25
 88c:	88 bb       	out	0x18, r24	; 24
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	08 95       	ret
 892:	27 b3       	in	r18, 0x17	; 23
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	82 2b       	or	r24, r18
 8a4:	87 bb       	out	0x17, r24	; 23
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	08 95       	ret
 8aa:	41 30       	cpi	r20, 0x01	; 1
 8ac:	49 f1       	breq	.+82     	; 0x900 <__stack+0xa1>
 8ae:	18 f0       	brcs	.+6      	; 0x8b6 <__stack+0x57>
 8b0:	42 30       	cpi	r20, 0x02	; 2
 8b2:	91 f0       	breq	.+36     	; 0x8d8 <__stack+0x79>
 8b4:	70 c0       	rjmp	.+224    	; 0x996 <__stack+0x137>
 8b6:	24 b3       	in	r18, 0x14	; 20
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	6a 95       	dec	r22
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
 8c6:	80 95       	com	r24
 8c8:	92 2f       	mov	r25, r18
 8ca:	98 23       	and	r25, r24
 8cc:	94 bb       	out	0x14, r25	; 20
 8ce:	95 b3       	in	r25, 0x15	; 21
 8d0:	89 23       	and	r24, r25
 8d2:	85 bb       	out	0x15, r24	; 21
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret
 8d8:	80 b7       	in	r24, 0x30	; 48
 8da:	8b 7f       	andi	r24, 0xFB	; 251
 8dc:	80 bf       	out	0x30, r24	; 48
 8de:	24 b3       	in	r18, 0x14	; 20
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
 8e6:	88 0f       	add	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	6a 95       	dec	r22
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
 8ee:	98 2f       	mov	r25, r24
 8f0:	90 95       	com	r25
 8f2:	92 23       	and	r25, r18
 8f4:	94 bb       	out	0x14, r25	; 20
 8f6:	95 b3       	in	r25, 0x15	; 21
 8f8:	89 2b       	or	r24, r25
 8fa:	85 bb       	out	0x15, r24	; 21
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	08 95       	ret
 900:	24 b3       	in	r18, 0x14	; 20
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	6a 95       	dec	r22
 90e:	e2 f7       	brpl	.-8      	; 0x908 <__stack+0xa9>
 910:	82 2b       	or	r24, r18
 912:	84 bb       	out	0x14, r24	; 20
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	08 95       	ret
 918:	41 30       	cpi	r20, 0x01	; 1
 91a:	49 f1       	breq	.+82     	; 0x96e <__stack+0x10f>
 91c:	18 f0       	brcs	.+6      	; 0x924 <__stack+0xc5>
 91e:	42 30       	cpi	r20, 0x02	; 2
 920:	91 f0       	breq	.+36     	; 0x946 <__stack+0xe7>
 922:	3b c0       	rjmp	.+118    	; 0x99a <__stack+0x13b>
 924:	21 b3       	in	r18, 0x11	; 17
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	6a 95       	dec	r22
 932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
 934:	80 95       	com	r24
 936:	92 2f       	mov	r25, r18
 938:	98 23       	and	r25, r24
 93a:	91 bb       	out	0x11, r25	; 17
 93c:	9b b3       	in	r25, 0x1b	; 27
 93e:	89 23       	and	r24, r25
 940:	8b bb       	out	0x1b, r24	; 27
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	08 95       	ret
 946:	80 b7       	in	r24, 0x30	; 48
 948:	8b 7f       	andi	r24, 0xFB	; 251
 94a:	80 bf       	out	0x30, r24	; 48
 94c:	21 b3       	in	r18, 0x11	; 17
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0xf9>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	6a 95       	dec	r22
 95a:	e2 f7       	brpl	.-8      	; 0x954 <__stack+0xf5>
 95c:	98 2f       	mov	r25, r24
 95e:	90 95       	com	r25
 960:	92 23       	and	r25, r18
 962:	91 bb       	out	0x11, r25	; 17
 964:	92 b3       	in	r25, 0x12	; 18
 966:	89 2b       	or	r24, r25
 968:	82 bb       	out	0x12, r24	; 18
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	08 95       	ret
 96e:	21 b3       	in	r18, 0x11	; 17
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x11b>
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	6a 95       	dec	r22
 97c:	e2 f7       	brpl	.-8      	; 0x976 <__stack+0x117>
 97e:	82 2b       	or	r24, r18
 980:	81 bb       	out	0x11, r24	; 17
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	08 95       	ret
 986:	82 e1       	ldi	r24, 0x12	; 18
 988:	08 95       	ret
 98a:	82 e1       	ldi	r24, 0x12	; 18
 98c:	08 95       	ret
 98e:	82 e1       	ldi	r24, 0x12	; 18
 990:	08 95       	ret
 992:	82 e1       	ldi	r24, 0x12	; 18
 994:	08 95       	ret
 996:	82 e1       	ldi	r24, 0x12	; 18
 998:	08 95       	ret
 99a:	82 e1       	ldi	r24, 0x12	; 18
 99c:	08 95       	ret

0000099e <DIO_u8SetPinData>:
 99e:	68 30       	cpi	r22, 0x08	; 8
 9a0:	08 f0       	brcs	.+2      	; 0x9a4 <DIO_u8SetPinData+0x6>
 9a2:	6b c0       	rjmp	.+214    	; 0xa7a <DIO_u8SetPinData+0xdc>
 9a4:	81 30       	cpi	r24, 0x01	; 1
 9a6:	01 f1       	breq	.+64     	; 0x9e8 <DIO_u8SetPinData+0x4a>
 9a8:	30 f0       	brcs	.+12     	; 0x9b6 <DIO_u8SetPinData+0x18>
 9aa:	82 30       	cpi	r24, 0x02	; 2
 9ac:	b1 f1       	breq	.+108    	; 0xa1a <DIO_u8SetPinData+0x7c>
 9ae:	83 30       	cpi	r24, 0x03	; 3
 9b0:	09 f4       	brne	.+2      	; 0x9b4 <DIO_u8SetPinData+0x16>
 9b2:	4b c0       	rjmp	.+150    	; 0xa4a <DIO_u8SetPinData+0xac>
 9b4:	64 c0       	rjmp	.+200    	; 0xa7e <DIO_u8SetPinData+0xe0>
 9b6:	42 30       	cpi	r20, 0x02	; 2
 9b8:	08 f0       	brcs	.+2      	; 0x9bc <DIO_u8SetPinData+0x1e>
 9ba:	63 c0       	rjmp	.+198    	; 0xa82 <DIO_u8SetPinData+0xe4>
 9bc:	5b b3       	in	r21, 0x1b	; 27
 9be:	21 e0       	ldi	r18, 0x01	; 1
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	06 2e       	mov	r0, r22
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_u8SetPinData+0x2c>
 9c6:	22 0f       	add	r18, r18
 9c8:	33 1f       	adc	r19, r19
 9ca:	0a 94       	dec	r0
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_u8SetPinData+0x28>
 9ce:	84 2f       	mov	r24, r20
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <DIO_u8SetPinData+0x3a>
 9d4:	88 0f       	add	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	6a 95       	dec	r22
 9da:	e2 f7       	brpl	.-8      	; 0x9d4 <DIO_u8SetPinData+0x36>
 9dc:	20 95       	com	r18
 9de:	25 23       	and	r18, r21
 9e0:	82 2b       	or	r24, r18
 9e2:	8b bb       	out	0x1b, r24	; 27
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	08 95       	ret
 9e8:	42 30       	cpi	r20, 0x02	; 2
 9ea:	08 f0       	brcs	.+2      	; 0x9ee <DIO_u8SetPinData+0x50>
 9ec:	4c c0       	rjmp	.+152    	; 0xa86 <DIO_u8SetPinData+0xe8>
 9ee:	58 b3       	in	r21, 0x18	; 24
 9f0:	21 e0       	ldi	r18, 0x01	; 1
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	06 2e       	mov	r0, r22
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_u8SetPinData+0x5e>
 9f8:	22 0f       	add	r18, r18
 9fa:	33 1f       	adc	r19, r19
 9fc:	0a 94       	dec	r0
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_u8SetPinData+0x5a>
 a00:	84 2f       	mov	r24, r20
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_u8SetPinData+0x6c>
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	6a 95       	dec	r22
 a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_u8SetPinData+0x68>
 a0e:	20 95       	com	r18
 a10:	25 23       	and	r18, r21
 a12:	82 2b       	or	r24, r18
 a14:	88 bb       	out	0x18, r24	; 24
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	08 95       	ret
 a1a:	42 30       	cpi	r20, 0x02	; 2
 a1c:	b0 f5       	brcc	.+108    	; 0xa8a <DIO_u8SetPinData+0xec>
 a1e:	55 b3       	in	r21, 0x15	; 21
 a20:	21 e0       	ldi	r18, 0x01	; 1
 a22:	30 e0       	ldi	r19, 0x00	; 0
 a24:	06 2e       	mov	r0, r22
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_u8SetPinData+0x8e>
 a28:	22 0f       	add	r18, r18
 a2a:	33 1f       	adc	r19, r19
 a2c:	0a 94       	dec	r0
 a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_u8SetPinData+0x8a>
 a30:	84 2f       	mov	r24, r20
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_u8SetPinData+0x9c>
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	6a 95       	dec	r22
 a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_u8SetPinData+0x98>
 a3e:	20 95       	com	r18
 a40:	25 23       	and	r18, r21
 a42:	82 2b       	or	r24, r18
 a44:	85 bb       	out	0x15, r24	; 21
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	08 95       	ret
 a4a:	42 30       	cpi	r20, 0x02	; 2
 a4c:	00 f5       	brcc	.+64     	; 0xa8e <DIO_u8SetPinData+0xf0>
 a4e:	52 b3       	in	r21, 0x12	; 18
 a50:	21 e0       	ldi	r18, 0x01	; 1
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	06 2e       	mov	r0, r22
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <DIO_u8SetPinData+0xbe>
 a58:	22 0f       	add	r18, r18
 a5a:	33 1f       	adc	r19, r19
 a5c:	0a 94       	dec	r0
 a5e:	e2 f7       	brpl	.-8      	; 0xa58 <DIO_u8SetPinData+0xba>
 a60:	84 2f       	mov	r24, r20
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <DIO_u8SetPinData+0xcc>
 a66:	88 0f       	add	r24, r24
 a68:	99 1f       	adc	r25, r25
 a6a:	6a 95       	dec	r22
 a6c:	e2 f7       	brpl	.-8      	; 0xa66 <DIO_u8SetPinData+0xc8>
 a6e:	20 95       	com	r18
 a70:	25 23       	and	r18, r21
 a72:	82 2b       	or	r24, r18
 a74:	82 bb       	out	0x12, r24	; 18
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	08 95       	ret
 a7a:	84 e1       	ldi	r24, 0x14	; 20
 a7c:	08 95       	ret
 a7e:	84 e1       	ldi	r24, 0x14	; 20
 a80:	08 95       	ret
 a82:	84 e1       	ldi	r24, 0x14	; 20
 a84:	08 95       	ret
 a86:	84 e1       	ldi	r24, 0x14	; 20
 a88:	08 95       	ret
 a8a:	84 e1       	ldi	r24, 0x14	; 20
 a8c:	08 95       	ret
 a8e:	84 e1       	ldi	r24, 0x14	; 20
 a90:	08 95       	ret

00000a92 <DIO_u8GetPinData>:
// function to read value on pin
uint8_t DIO_u8GetPinData(uint8_t port, uint8_t pin, uint8_t* data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
    // check if true pin number passed to the function 
	if ( pin <= PORT_PINS )
 a92:	68 30       	cpi	r22, 0x08	; 8
 a94:	c0 f5       	brcc	.+112    	; 0xb06 <DIO_u8GetPinData+0x74>
	{
		// check which port is selected and read data from it's pin  
		switch(port)
 a96:	81 30       	cpi	r24, 0x01	; 1
 a98:	91 f0       	breq	.+36     	; 0xabe <DIO_u8GetPinData+0x2c>
 a9a:	28 f0       	brcs	.+10     	; 0xaa6 <DIO_u8GetPinData+0x14>
 a9c:	82 30       	cpi	r24, 0x02	; 2
 a9e:	d9 f0       	breq	.+54     	; 0xad6 <DIO_u8GetPinData+0x44>
 aa0:	83 30       	cpi	r24, 0x03	; 3
 aa2:	29 f1       	breq	.+74     	; 0xaee <DIO_u8GetPinData+0x5c>
 aa4:	32 c0       	rjmp	.+100    	; 0xb0a <DIO_u8GetPinData+0x78>
		{
			case PORTA:
				*data = GET_BIT(PINA_REG, pin);
 aa6:	89 b3       	in	r24, 0x19	; 25
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_u8GetPinData+0x1e>
 aac:	95 95       	asr	r25
 aae:	87 95       	ror	r24
 ab0:	6a 95       	dec	r22
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_u8GetPinData+0x1a>
 ab4:	81 70       	andi	r24, 0x01	; 1
 ab6:	fa 01       	movw	r30, r20
 ab8:	80 83       	st	Z, r24
}

// function to read value on pin
uint8_t DIO_u8GetPinData(uint8_t port, uint8_t pin, uint8_t* data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 aba:	80 e0       	ldi	r24, 0x00	; 0
		// check which port is selected and read data from it's pin  
		switch(port)
		{
			case PORTA:
				*data = GET_BIT(PINA_REG, pin);
				break;
 abc:	08 95       	ret
			
			case PORTB:
				*data = GET_BIT(PINB_REG, pin);
 abe:	86 b3       	in	r24, 0x16	; 22
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <DIO_u8GetPinData+0x36>
 ac4:	95 95       	asr	r25
 ac6:	87 95       	ror	r24
 ac8:	6a 95       	dec	r22
 aca:	e2 f7       	brpl	.-8      	; 0xac4 <DIO_u8GetPinData+0x32>
 acc:	81 70       	andi	r24, 0x01	; 1
 ace:	fa 01       	movw	r30, r20
 ad0:	80 83       	st	Z, r24
}

// function to read value on pin
uint8_t DIO_u8GetPinData(uint8_t port, uint8_t pin, uint8_t* data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 ad2:	80 e0       	ldi	r24, 0x00	; 0
				*data = GET_BIT(PINA_REG, pin);
				break;
			
			case PORTB:
				*data = GET_BIT(PINB_REG, pin);
				break;
 ad4:	08 95       	ret
			
			case PORTC:
				*data = GET_BIT(PINC_REG, pin);
 ad6:	83 b3       	in	r24, 0x13	; 19
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_u8GetPinData+0x4e>
 adc:	95 95       	asr	r25
 ade:	87 95       	ror	r24
 ae0:	6a 95       	dec	r22
 ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_u8GetPinData+0x4a>
 ae4:	81 70       	andi	r24, 0x01	; 1
 ae6:	fa 01       	movw	r30, r20
 ae8:	80 83       	st	Z, r24
}

// function to read value on pin
uint8_t DIO_u8GetPinData(uint8_t port, uint8_t pin, uint8_t* data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 aea:	80 e0       	ldi	r24, 0x00	; 0
				*data = GET_BIT(PINB_REG, pin);
				break;
			
			case PORTC:
				*data = GET_BIT(PINC_REG, pin);
				break;
 aec:	08 95       	ret
			
			case PORTD:
				*data = GET_BIT(PIND_REG, pin);
 aee:	80 b3       	in	r24, 0x10	; 16
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_u8GetPinData+0x66>
 af4:	95 95       	asr	r25
 af6:	87 95       	ror	r24
 af8:	6a 95       	dec	r22
 afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_u8GetPinData+0x62>
 afc:	81 70       	andi	r24, 0x01	; 1
 afe:	fa 01       	movw	r30, r20
 b00:	80 83       	st	Z, r24
}

// function to read value on pin
uint8_t DIO_u8GetPinData(uint8_t port, uint8_t pin, uint8_t* data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 b02:	80 e0       	ldi	r24, 0x00	; 0
				*data = GET_BIT(PINC_REG, pin);
				break;
			
			case PORTD:
				*data = GET_BIT(PIND_REG, pin);
				break;
 b04:	08 95       	ret
				u8ErrorState =  GetPinData_Error ;
		}
	}
	else 
	{
		u8ErrorState =  GetPinData_Error ;	
 b06:	86 e1       	ldi	r24, 0x16	; 22
 b08:	08 95       	ret
			case PORTD:
				*data = GET_BIT(PIND_REG, pin);
				break;
			
			default:
				u8ErrorState =  GetPinData_Error ;
 b0a:	86 e1       	ldi	r24, 0x16	; 22
	else 
	{
		u8ErrorState =  GetPinData_Error ;	
	}
	return u8ErrorState ;
}
 b0c:	08 95       	ret

00000b0e <TIMER0_u8Init>:
		TIMER0_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
 b0e:	83 b7       	in	r24, 0x33	; 51
 b10:	8f 7b       	andi	r24, 0xBF	; 191
 b12:	83 bf       	out	0x33, r24	; 51
 b14:	83 b7       	in	r24, 0x33	; 51
 b16:	88 60       	ori	r24, 0x08	; 8
 b18:	83 bf       	out	0x33, r24	; 51
 b1a:	8f b7       	in	r24, 0x3f	; 63
 b1c:	80 68       	ori	r24, 0x80	; 128
 b1e:	8f bf       	out	0x3f, r24	; 63
 b20:	89 b7       	in	r24, 0x39	; 57
 b22:	82 60       	ori	r24, 0x02	; 2
 b24:	89 bf       	out	0x39, r24	; 57
 b26:	03 b6       	in	r0, 0x33	; 51
 b28:	06 fc       	sbrc	r0, 6
 b2a:	0b c0       	rjmp	.+22     	; 0xb42 <TIMER0_u8Init+0x34>
 b2c:	03 b6       	in	r0, 0x33	; 51
 b2e:	03 fe       	sbrs	r0, 3
 b30:	0a c0       	rjmp	.+20     	; 0xb46 <TIMER0_u8Init+0x38>
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	07 fe       	sbrs	r0, 7
 b36:	09 c0       	rjmp	.+18     	; 0xb4a <TIMER0_u8Init+0x3c>
 b38:	09 b6       	in	r0, 0x39	; 57
 b3a:	01 fc       	sbrc	r0, 1
 b3c:	08 c0       	rjmp	.+16     	; 0xb4e <TIMER0_u8Init+0x40>
 b3e:	81 e4       	ldi	r24, 0x41	; 65
 b40:	08 95       	ret
 b42:	81 e4       	ldi	r24, 0x41	; 65
 b44:	08 95       	ret
 b46:	81 e4       	ldi	r24, 0x41	; 65
 b48:	08 95       	ret
 b4a:	81 e4       	ldi	r24, 0x41	; 65
 b4c:	08 95       	ret
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	08 95       	ret

00000b52 <TIMER0_u8Start>:
 b52:	8d e7       	ldi	r24, 0x7D	; 125
 b54:	8c bf       	out	0x3c, r24	; 60
 b56:	83 b7       	in	r24, 0x33	; 51
 b58:	81 60       	ori	r24, 0x01	; 1
 b5a:	83 bf       	out	0x33, r24	; 51
 b5c:	83 b7       	in	r24, 0x33	; 51
 b5e:	82 60       	ori	r24, 0x02	; 2
 b60:	83 bf       	out	0x33, r24	; 51
 b62:	83 b7       	in	r24, 0x33	; 51
 b64:	8b 7f       	andi	r24, 0xFB	; 251
 b66:	83 bf       	out	0x33, r24	; 51
 b68:	03 b6       	in	r0, 0x33	; 51
 b6a:	00 fe       	sbrs	r0, 0
 b6c:	08 c0       	rjmp	.+16     	; 0xb7e <TIMER0_u8Start+0x2c>
 b6e:	03 b6       	in	r0, 0x33	; 51
 b70:	01 fe       	sbrs	r0, 1
 b72:	07 c0       	rjmp	.+14     	; 0xb82 <TIMER0_u8Start+0x30>
 b74:	03 b6       	in	r0, 0x33	; 51
 b76:	02 fe       	sbrs	r0, 2
 b78:	06 c0       	rjmp	.+12     	; 0xb86 <TIMER0_u8Start+0x34>
 b7a:	82 e4       	ldi	r24, 0x42	; 66
 b7c:	08 95       	ret
 b7e:	82 e4       	ldi	r24, 0x42	; 66
 b80:	08 95       	ret
 b82:	82 e4       	ldi	r24, 0x42	; 66
 b84:	08 95       	ret
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	08 95       	ret

00000b8a <TIMER0_u8ISRDelay_ms>:
 b8a:	9c 01       	movw	r18, r24
 b8c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <delay_state>
 b90:	91 30       	cpi	r25, 0x01	; 1
 b92:	a1 f0       	breq	.+40     	; 0xbbc <TIMER0_u8ISRDelay_ms+0x32>
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <delay_state>
 b9a:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <compare+0x1>
 b9e:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <compare>
 ba2:	61 15       	cp	r22, r1
 ba4:	71 05       	cpc	r23, r1
 ba6:	61 f0       	breq	.+24     	; 0xbc0 <TIMER0_u8ISRDelay_ms+0x36>
 ba8:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <delayCallBack+0x1>
 bac:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <delayCallBack>
 bb0:	0e 94 87 05 	call	0xb0e	; 0xb0e <TIMER0_u8Init>
 bb4:	0e 94 a9 05 	call	0xb52	; 0xb52 <TIMER0_u8Start>
 bb8:	80 e0       	ldi	r24, 0x00	; 0
 bba:	08 95       	ret
 bbc:	84 e4       	ldi	r24, 0x44	; 68
 bbe:	08 95       	ret
 bc0:	84 e4       	ldi	r24, 0x44	; 68
 bc2:	08 95       	ret

00000bc4 <__vector_10>:

// ISR 
void __vector_10(void)
{
 bc4:	1f 92       	push	r1
 bc6:	0f 92       	push	r0
 bc8:	0f b6       	in	r0, 0x3f	; 63
 bca:	0f 92       	push	r0
 bcc:	11 24       	eor	r1, r1
 bce:	2f 93       	push	r18
 bd0:	3f 93       	push	r19
 bd2:	4f 93       	push	r20
 bd4:	5f 93       	push	r21
 bd6:	6f 93       	push	r22
 bd8:	7f 93       	push	r23
 bda:	8f 93       	push	r24
 bdc:	9f 93       	push	r25
 bde:	af 93       	push	r26
 be0:	bf 93       	push	r27
 be2:	ef 93       	push	r30
 be4:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 be6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <counter>
 bea:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <counter+0x1>
 bee:	01 96       	adiw	r24, 0x01	; 1
 bf0:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <counter+0x1>
 bf4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 bf8:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <counter>
 bfc:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <counter+0x1>
 c00:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <compare>
 c04:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <compare+0x1>
 c08:	28 17       	cp	r18, r24
 c0a:	39 07       	cpc	r19, r25
 c0c:	a1 f4       	brne	.+40     	; 0xc36 <__vector_10+0x72>
 c0e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <delayCallBack>
 c12:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <delayCallBack+0x1>
 c16:	89 2b       	or	r24, r25
 c18:	71 f0       	breq	.+28     	; 0xc36 <__vector_10+0x72>
	{
		counter = 0;
 c1a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <counter+0x1>
 c1e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter>
		CLR_BIT(TIMSK_REG, OCIE0);							// reset interrupt 
 c22:	89 b7       	in	r24, 0x39	; 57
 c24:	8d 7f       	andi	r24, 0xFD	; 253
 c26:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 c28:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <delay_state>
		delayCallBack();									// call the function 
 c2c:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <delayCallBack>
 c30:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <delayCallBack+0x1>
 c34:	09 95       	icall
	}
 c36:	ff 91       	pop	r31
 c38:	ef 91       	pop	r30
 c3a:	bf 91       	pop	r27
 c3c:	af 91       	pop	r26
 c3e:	9f 91       	pop	r25
 c40:	8f 91       	pop	r24
 c42:	7f 91       	pop	r23
 c44:	6f 91       	pop	r22
 c46:	5f 91       	pop	r21
 c48:	4f 91       	pop	r20
 c4a:	3f 91       	pop	r19
 c4c:	2f 91       	pop	r18
 c4e:	0f 90       	pop	r0
 c50:	0f be       	out	0x3f, r0	; 63
 c52:	0f 90       	pop	r0
 c54:	1f 90       	pop	r1
 c56:	18 95       	reti

00000c58 <TIMER2_u8Init>:
		TIMER2_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
 c58:	85 b5       	in	r24, 0x25	; 37
 c5a:	8f 7b       	andi	r24, 0xBF	; 191
 c5c:	85 bd       	out	0x25, r24	; 37
 c5e:	85 b5       	in	r24, 0x25	; 37
 c60:	88 60       	ori	r24, 0x08	; 8
 c62:	85 bd       	out	0x25, r24	; 37
 c64:	8f b7       	in	r24, 0x3f	; 63
 c66:	80 68       	ori	r24, 0x80	; 128
 c68:	8f bf       	out	0x3f, r24	; 63
 c6a:	89 b7       	in	r24, 0x39	; 57
 c6c:	80 68       	ori	r24, 0x80	; 128
 c6e:	89 bf       	out	0x39, r24	; 57
 c70:	14 bc       	out	0x24, r1	; 36
 c72:	05 b4       	in	r0, 0x25	; 37
 c74:	06 fc       	sbrc	r0, 6
 c76:	0b c0       	rjmp	.+22     	; 0xc8e <TIMER2_u8Init+0x36>
 c78:	05 b4       	in	r0, 0x25	; 37
 c7a:	03 fe       	sbrs	r0, 3
 c7c:	0a c0       	rjmp	.+20     	; 0xc92 <TIMER2_u8Init+0x3a>
 c7e:	0f b6       	in	r0, 0x3f	; 63
 c80:	07 fe       	sbrs	r0, 7
 c82:	09 c0       	rjmp	.+18     	; 0xc96 <TIMER2_u8Init+0x3e>
 c84:	09 b6       	in	r0, 0x39	; 57
 c86:	07 fc       	sbrc	r0, 7
 c88:	08 c0       	rjmp	.+16     	; 0xc9a <TIMER2_u8Init+0x42>
 c8a:	81 ef       	ldi	r24, 0xF1	; 241
 c8c:	08 95       	ret
 c8e:	81 ef       	ldi	r24, 0xF1	; 241
 c90:	08 95       	ret
 c92:	81 ef       	ldi	r24, 0xF1	; 241
 c94:	08 95       	ret
 c96:	81 ef       	ldi	r24, 0xF1	; 241
 c98:	08 95       	ret
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	08 95       	ret

00000c9e <TIMER2_u8Start>:
 c9e:	8d e7       	ldi	r24, 0x7D	; 125
 ca0:	83 bd       	out	0x23, r24	; 35
 ca2:	85 b5       	in	r24, 0x25	; 37
 ca4:	8e 7f       	andi	r24, 0xFE	; 254
 ca6:	85 bd       	out	0x25, r24	; 37
 ca8:	85 b5       	in	r24, 0x25	; 37
 caa:	8d 7f       	andi	r24, 0xFD	; 253
 cac:	85 bd       	out	0x25, r24	; 37
 cae:	85 b5       	in	r24, 0x25	; 37
 cb0:	84 60       	ori	r24, 0x04	; 4
 cb2:	85 bd       	out	0x25, r24	; 37
 cb4:	03 b6       	in	r0, 0x33	; 51
 cb6:	00 fc       	sbrc	r0, 0
 cb8:	08 c0       	rjmp	.+16     	; 0xcca <TIMER2_u8Start+0x2c>
 cba:	03 b6       	in	r0, 0x33	; 51
 cbc:	01 fc       	sbrc	r0, 1
 cbe:	07 c0       	rjmp	.+14     	; 0xcce <TIMER2_u8Start+0x30>
 cc0:	03 b6       	in	r0, 0x33	; 51
 cc2:	02 fc       	sbrc	r0, 2
 cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <TIMER2_u8Start+0x34>
 cc6:	82 ef       	ldi	r24, 0xF2	; 242
 cc8:	08 95       	ret
 cca:	82 ef       	ldi	r24, 0xF2	; 242
 ccc:	08 95       	ret
 cce:	82 ef       	ldi	r24, 0xF2	; 242
 cd0:	08 95       	ret
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	08 95       	ret

00000cd6 <TIMER2_u8Stop>:
 cd6:	85 b5       	in	r24, 0x25	; 37
 cd8:	8e 7f       	andi	r24, 0xFE	; 254
 cda:	85 bd       	out	0x25, r24	; 37
 cdc:	85 b5       	in	r24, 0x25	; 37
 cde:	8d 7f       	andi	r24, 0xFD	; 253
 ce0:	85 bd       	out	0x25, r24	; 37
 ce2:	85 b5       	in	r24, 0x25	; 37
 ce4:	8b 7f       	andi	r24, 0xFB	; 251
 ce6:	85 bd       	out	0x25, r24	; 37
 ce8:	89 b7       	in	r24, 0x39	; 57
 cea:	8f 77       	andi	r24, 0x7F	; 127
 cec:	89 bf       	out	0x39, r24	; 57
 cee:	03 b6       	in	r0, 0x33	; 51
 cf0:	00 fc       	sbrc	r0, 0
 cf2:	0b c0       	rjmp	.+22     	; 0xd0a <TIMER2_u8Stop+0x34>
 cf4:	03 b6       	in	r0, 0x33	; 51
 cf6:	01 fc       	sbrc	r0, 1
 cf8:	0a c0       	rjmp	.+20     	; 0xd0e <TIMER2_u8Stop+0x38>
 cfa:	03 b6       	in	r0, 0x33	; 51
 cfc:	02 fc       	sbrc	r0, 2
 cfe:	09 c0       	rjmp	.+18     	; 0xd12 <TIMER2_u8Stop+0x3c>
 d00:	09 b6       	in	r0, 0x39	; 57
 d02:	07 fe       	sbrs	r0, 7
 d04:	08 c0       	rjmp	.+16     	; 0xd16 <TIMER2_u8Stop+0x40>
 d06:	82 ef       	ldi	r24, 0xF2	; 242
 d08:	08 95       	ret
 d0a:	82 ef       	ldi	r24, 0xF2	; 242
 d0c:	08 95       	ret
 d0e:	82 ef       	ldi	r24, 0xF2	; 242
 d10:	08 95       	ret
 d12:	82 ef       	ldi	r24, 0xF2	; 242
 d14:	08 95       	ret
 d16:	80 e0       	ldi	r24, 0x00	; 0
 d18:	08 95       	ret

00000d1a <TIMER2_u8ISRDelay_ms>:
 d1a:	9c 01       	movw	r18, r24
 d1c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <delay_state>
 d20:	91 30       	cpi	r25, 0x01	; 1
 d22:	a1 f0       	breq	.+40     	; 0xd4c <TIMER2_u8ISRDelay_ms+0x32>
 d24:	81 e0       	ldi	r24, 0x01	; 1
 d26:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <delay_state>
 d2a:	30 93 7b 00 	sts	0x007B, r19	; 0x80007b <compare+0x1>
 d2e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <compare>
 d32:	61 15       	cp	r22, r1
 d34:	71 05       	cpc	r23, r1
 d36:	61 f0       	breq	.+24     	; 0xd50 <TIMER2_u8ISRDelay_ms+0x36>
 d38:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <delayCallBack+0x1>
 d3c:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <delayCallBack>
 d40:	0e 94 2c 06 	call	0xc58	; 0xc58 <TIMER2_u8Init>
 d44:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMER2_u8Start>
 d48:	80 e0       	ldi	r24, 0x00	; 0
 d4a:	08 95       	ret
 d4c:	84 ef       	ldi	r24, 0xF4	; 244
 d4e:	08 95       	ret
 d50:	84 ef       	ldi	r24, 0xF4	; 244
 d52:	08 95       	ret

00000d54 <__vector_4>:

// ISR 
void __vector_4(void)
{
 d54:	1f 92       	push	r1
 d56:	0f 92       	push	r0
 d58:	0f b6       	in	r0, 0x3f	; 63
 d5a:	0f 92       	push	r0
 d5c:	11 24       	eor	r1, r1
 d5e:	2f 93       	push	r18
 d60:	3f 93       	push	r19
 d62:	4f 93       	push	r20
 d64:	5f 93       	push	r21
 d66:	6f 93       	push	r22
 d68:	7f 93       	push	r23
 d6a:	8f 93       	push	r24
 d6c:	9f 93       	push	r25
 d6e:	af 93       	push	r26
 d70:	bf 93       	push	r27
 d72:	ef 93       	push	r30
 d74:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 d76:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <counter>
 d7a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <counter+0x1>
 d7e:	01 96       	adiw	r24, 0x01	; 1
 d80:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <counter+0x1>
 d84:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 d88:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <counter>
 d8c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <counter+0x1>
 d90:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <compare>
 d94:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <compare+0x1>
 d98:	28 17       	cp	r18, r24
 d9a:	39 07       	cpc	r19, r25
 d9c:	a1 f4       	brne	.+40     	; 0xdc6 <__vector_4+0x72>
 d9e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <delayCallBack>
 da2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <delayCallBack+0x1>
 da6:	89 2b       	or	r24, r25
 da8:	71 f0       	breq	.+28     	; 0xdc6 <__vector_4+0x72>
	{
		counter = 0;
 daa:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <counter+0x1>
 dae:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <counter>
		CLR_BIT(TIMSK_REG, OCIE2);							// reset interrupt 
 db2:	89 b7       	in	r24, 0x39	; 57
 db4:	8f 77       	andi	r24, 0x7F	; 127
 db6:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 db8:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <delay_state>
		delayCallBack();									// call the function 	
 dbc:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <delayCallBack>
 dc0:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <delayCallBack+0x1>
 dc4:	09 95       	icall
	}
 dc6:	ff 91       	pop	r31
 dc8:	ef 91       	pop	r30
 dca:	bf 91       	pop	r27
 dcc:	af 91       	pop	r26
 dce:	9f 91       	pop	r25
 dd0:	8f 91       	pop	r24
 dd2:	7f 91       	pop	r23
 dd4:	6f 91       	pop	r22
 dd6:	5f 91       	pop	r21
 dd8:	4f 91       	pop	r20
 dda:	3f 91       	pop	r19
 ddc:	2f 91       	pop	r18
 dde:	0f 90       	pop	r0
 de0:	0f be       	out	0x3f, r0	; 63
 de2:	0f 90       	pop	r0
 de4:	1f 90       	pop	r1
 de6:	18 95       	reti

00000de8 <UART_u8Init>:
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
 de8:	8a b1       	in	r24, 0x0a	; 10
 dea:	80 61       	ori	r24, 0x10	; 16
 dec:	8a b9       	out	0x0a, r24	; 10
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
 dee:	54 9b       	sbis	0x0a, 4	; 10
 df0:	02 c0       	rjmp	.+4      	; 0xdf6 <UART_u8Init+0xe>
 * Arguments   : void
 * return      : UART_Init_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 df2:	80 e0       	ldi	r24, 0x00	; 0
 df4:	01 c0       	rjmp	.+2      	; 0xdf8 <UART_u8Init+0x10>
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
		 u8ErrorState = UART_Init_Error ;
 df6:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Send enable config*/
	SET_BIT(UCSRB_REG,TXEN_BIT);
 df8:	9a b1       	in	r25, 0x0a	; 10
 dfa:	98 60       	ori	r25, 0x08	; 8
 dfc:	9a b9       	out	0x0a, r25	; 10
	if ( GET_BIT(UCSRB_REG,TXEN_BIT) == 0 )
 dfe:	53 9b       	sbis	0x0a, 3	; 10
		u8ErrorState = UART_Init_Error ;
 e00:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Load configuration values in UCSrC Register*/
	/*Set URSEL to access UCSRC Reg*/
	SET_BIT(UCSRC_REG,URSEL_BIT);
 e02:	90 b5       	in	r25, 0x20	; 32
 e04:	90 68       	ori	r25, 0x80	; 128
 e06:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) == 0 )
 e08:	57 9b       	sbis	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 e0a:	81 e8       	ldi	r24, 0x81	; 129
		
	/*ASynchronization mode*/				  
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
 e0c:	90 b5       	in	r25, 0x20	; 32
 e0e:	9f 7b       	andi	r25, 0xBF	; 191
 e10:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,UMSEL_BIT) != 0 )
 e12:	56 99       	sbic	0x0a, 6	; 10
		u8ErrorState = UART_Init_Error ;
 e14:	81 e8       	ldi	r24, 0x81	; 129
		
	/*Parity Mode config*/
	UCSRC_REG|=(UART_PARITY<<4);
 e16:	90 b5       	in	r25, 0x20	; 32
 e18:	90 bd       	out	0x20, r25	; 32
		 
	/*Stop Bits config*/
	ASSIGN_BIT(UCSRC_REG,USBS_BIT,UART_STOP_BIT_NO);
 e1a:	90 b5       	in	r25, 0x20	; 32
 e1c:	97 7f       	andi	r25, 0xF7	; 247
 e1e:	90 bd       	out	0x20, r25	; 32
		 
	/*Character size config*/
	if (UART_SYMPOL_SIZE != UART_9_BITS)
	{
		 /*config char size(5,6,7,8)*/
		 UCSRC_REG |= (UART_SYMPOL_SIZE<<1);
 e20:	90 b5       	in	r25, 0x20	; 32
 e22:	96 60       	ori	r25, 0x06	; 6
 e24:	90 bd       	out	0x20, r25	; 32
	}
	/*end of char size check*/
			 
	/*Baud Rate Value Config*/
	// URSEL BIT must be 0 to can write on UBRR Register
	CLR_BIT(UCSRC_REG,URSEL_BIT);
 e26:	90 b5       	in	r25, 0x20	; 32
 e28:	9f 77       	andi	r25, 0x7F	; 127
 e2a:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) != 0 )
 e2c:	57 99       	sbic	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 e2e:	81 e8       	ldi	r24, 0x81	; 129
	// set the  baud rate 	
	UBRRH_REG = 0 ;
 e30:	10 bc       	out	0x20, r1	; 32
	UBRRL_REG = UART_BAUDRATE;
 e32:	93 e3       	ldi	r25, 0x33	; 51
 e34:	99 b9       	out	0x09, r25	; 9
	
	return u8ErrorState ;
}
 e36:	08 95       	ret

00000e38 <UART_u8SendByte>:
 */
uint8_t UART_u8SendByte(uint8_t data)
{
	uint8_t u8ErrorState ;
	/*wait while previous sending is complete*/
	while ( (GET_BIT(UCSRA_REG,UDRE_BIT)) == 0 );
 e38:	5d 9b       	sbis	0x0b, 5	; 11
 e3a:	fe cf       	rjmp	.-4      	; 0xe38 <UART_u8SendByte>
	/*send byte*/
	UDR_REG = data ;
 e3c:	8c b9       	out	0x0c, r24	; 12
	if ( UDR_REG != data )
 e3e:	8c b1       	in	r24, 0x0c	; 12
		u8ErrorState = UART_SendByte_Error ;
	return u8ErrorState ;
}
 e40:	82 e8       	ldi	r24, 0x82	; 130
 e42:	08 95       	ret

00000e44 <_exit>:
 e44:	f8 94       	cli

00000e46 <__stop_program>:
 e46:	ff cf       	rjmp	.-2      	; 0xe46 <__stop_program>
